using System;
using System.Collections;
using System.Data;
using System.Reflection;
using System.Security.Permissions;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Collections.Generic;
using System.Linq;

[assembly: System.Web.UI.WebResource("FrontDesk.Server.Web.Controls.Grid.images.collapse_grid.png", "image/png")]
[assembly: System.Web.UI.WebResource("FrontDesk.Server.Web.Controls.Grid.images.expand_grid.png", "image/png")]


namespace FrontDesk.Server.Web.Controls
{
    [AspNetHostingPermissionAttribute(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
    [AspNetHostingPermissionAttribute(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
    [ToolboxData("<{0}:HierarDynamicGrid runat=server></{0}:HierarDynamicGrid>")]
    [Obfuscation(Feature = "renaming", Exclude = true, ApplyToMembers = true)]
    public class HierarDynamicGrid : GridView, ICallbackEventHandler
    {

        public const string ChildItemLoadedJSEventName = "HierarDynamicGrid.Loaded";

        /// <summary>
        /// Name of the Hidden field that stores the ClientIDs of the expanded rows
        /// </summary>
        private const string EXPANDEDCLIENTIDS_HIDDENFIELDNAME = "HierarDynamicGrid_ExpandedIDs_";

        /// <summary>
        /// String used as a separator between the different ClientIDs in the hidden text field
        /// Note: when changing this value please update the JavaScripts too (hardcoded)
        /// </summary>
        internal const string EXPANDEDCLIENTIDS_SEPARATOR = ", ";

        /// <summary>
        /// Index of the HierarGridColumn
        /// </summary>
        private int _hierarColumnID = -1;

        /// <summary>
        /// Stores the number of columns included AutoGeneratedColumns
        /// </summary>
        private int _columnCount = -1;

        #region Class: RowStates
        /// <summary>
        /// Helper class that externally looks like a collection with an indexer but stores the RowState in the 
        /// owner's hidden text box "ExpandedClientIDs"
        /// </summary>
        public class RowStates
        {
            private HierarDynamicGrid _owner;

            /// <summary>
            /// Specifies whether a Row is expanded or collapsed
            /// </summary>
            public bool this[int counter]
            {
                get
                {
                    if (_owner.Rows.Count > counter)
                    {
                        Image image = (Image)_owner.Rows[counter].FindControl("Icon");
                        if (image != null && _owner.ExpandedClientIDs != String.Empty)
                        {
                            if (_owner.ExpandedClientIDs.IndexOf(image.ClientID) >= 0)
                                return true;
                        }
                    }
                    return false;
                }
                set
                {
                    if (_owner.Rows.Count > counter)
                    {
                        Image image = (Image)_owner.Rows[counter].FindControl("Icon");
                        if (image != null)
                        {
                            if (value == true)
                            {
                                //add the ClientID to the hidden text field
                                if (_owner.ExpandedClientIDs.IndexOf(image.ClientID) < 0)
                                    _owner.ExpandedClientIDs += HierarDynamicGrid.EXPANDEDCLIENTIDS_SEPARATOR + image.ClientID;
                            }
                            else
                                //remove the ClientID from the hidden text field
                                _owner.ExpandedClientIDs = _owner.ExpandedClientIDs.Replace(image.ClientID, String.Empty);
                        }
                    }
                }
            }

            /// <summary>
            /// Constructor that sets a reference to the parent HierarGrid
            /// </summary>
            /// <param name="hierarGrid">Reference to the parent HierarGrid</param>
            public RowStates(HierarDynamicGrid hierarGrid)
            {
                _owner = hierarGrid;
            }

            /// <summary>
            /// Collapses all the rows
            /// </summary>
            public void CollapseAll()
            {
                SetAll(false);
            }

            /// <summary>
            /// Expands all the rows
            /// </summary>
            public void ExpandAll()
            {
                SetAll(true);
            }

            /// <summary>
            /// Expands or collapses all the rows
            /// </summary>
            /// <param name="expanded"></param>
            private void SetAll(bool expanded)
            {
                for (int counter = 0; counter < _owner.Rows.Count; counter++)
                    this[counter] = expanded;
            }
        }
        #endregion Class: RowStates

        #region Property: ExpandedClientIDs
        private string _expandedClientIDs = String.Empty;

        /// <summary>
        /// Specifies the ClientIDs of the expanded rows
        /// </summary>
        internal string ExpandedClientIDs
        {
            get { return _expandedClientIDs; }
            set
            {
                _expandedClientIDs = value;
                //remove unnecessary EXPANDEDCLIENTIDS_SEPARATOR from the beginning, the end and doubles in the middle
                _expandedClientIDs = _expandedClientIDs.Replace(EXPANDEDCLIENTIDS_SEPARATOR + EXPANDEDCLIENTIDS_SEPARATOR, EXPANDEDCLIENTIDS_SEPARATOR);
                if (_expandedClientIDs.StartsWith(EXPANDEDCLIENTIDS_SEPARATOR))
                    _expandedClientIDs = _expandedClientIDs.Remove(0, EXPANDEDCLIENTIDS_SEPARATOR.Length);
                if (_expandedClientIDs.EndsWith(EXPANDEDCLIENTIDS_SEPARATOR))
                    _expandedClientIDs = _expandedClientIDs.Substring(0, _expandedClientIDs.Length - EXPANDEDCLIENTIDS_SEPARATOR.Length);
            }
        }
        #endregion Property: ExpandedClientIDs

        #region Enum: TemplateDataModes
        /// <summary>
        /// Specifies whether to load one instance of the template for all child rows of a relation or to 
        /// load one instance of the template for each child row
        /// </summary>
        public enum TemplateDataModes
        {
            /// <summary>
            /// Specifies that one template per table shall be loaded
            /// </summary>
            Table,
            /// <summary>
            /// Specifies that one template per row shall be loaded
            /// </summary>
            SingleRow

        }

        #endregion Enum: TemplateDataModes

        private TemplateDataModes _templateDataMode = TemplateDataModes.SingleRow;
        /// <summary>
        /// Template data mode
        /// </summary>
        public TemplateDataModes TemplateDataMode
        {
            get { return _templateDataMode; }
            set { _templateDataMode = value; }
        }

        /// <summary>
        /// Overriding the implementation of the DataGrid to add the additional HierarColumn 
        /// if not already existing
        /// </summary>
        /// <param name="dataSource"></param>
        /// <param name="useDataSource"></param>
        /// <returns></returns>
        protected override ICollection CreateColumns(PagedDataSource dataSource, bool useDataSource)
        {
            var al = new ArrayList(base.CreateColumns(dataSource, useDataSource));

            _hierarColumnID = -1;

            for (int counter = 0; counter < al.Count; counter++)
            {
                if (al[counter] is HierarColumn)
                {
                    _hierarColumnID = counter;
                    break;
                }
            }

            if (_hierarColumnID == -1)
            {
                var col = new HierarColumn();
                col.DataKeyName = this.DataKeyNames[0];

                al.Insert(0, col);
                if (HttpContext.Current != null)
                    this.Columns.Insert(0, col);
                _hierarColumnID = 0;
            }

            _columnCount = al.Count;

            return al;
        }

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);

            //register on the page that LoadPostData is being called
            //Page.RegisterRequiresPostBack(this);

            //specifies the name of the hidden field that contains the ClientIDs of the expanded rows
            string hiddenFieldName = EXPANDEDCLIENTIDS_HIDDENFIELDNAME + this.ClientID;


            if (this.Rows.Count > 0)
            {

                StringBuilder jscript = new StringBuilder();
                jscript.AppendFormat(@"var table = $get('{0}');", this.ClientID);
                jscript.AppendFormat(@"if(table!=null){{table.ExpandedClientIDsName = '{0}';", hiddenFieldName);
                jscript.AppendFormat(@"table.ColumnCount = '{0}';}}", _columnCount);

                var ajaxScipt = ScriptManager.GetCurrent(this.Page);
                if (ajaxScipt == null || !ajaxScipt.IsInAsyncPostBack)
                {

                    Page.ClientScript.RegisterStartupScript(this.GetType(), "_table_attr", jscript.ToString(), true);


                    //register the hidden field that contains the ClientIDs of the expanded rows
                    Page.ClientScript.RegisterHiddenField(hiddenFieldName, ExpandedClientIDs);
                }
                else
                {
                    ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "_table_attr", jscript.ToString(), true);
                    ScriptManager.RegisterHiddenField(this, hiddenFieldName, ExpandedClientIDs);

                }
            }

            if (!Page.IsPostBack)
            {
                RegisterCallbackMethods();
            }
        }




        #region Row expand images

        private string _collapsedImageUrl = null;
        private string _expandedImageUrl = null;


        /// <summary>
        /// Image url for collapsed row state
        /// </summary>
        [UrlProperty()]
        public string CollapsedImageUrl
        {
            get
            {
                if (!string.IsNullOrEmpty(_collapsedImageUrl)) return _collapsedImageUrl;
                else return this.Page.ClientScript.GetWebResourceUrl(this.GetType(), "FrontDesk.Server.Web.Controls.Grid.images.expand_grid.png");
            }
            set
            {
                _collapsedImageUrl = value;
            }
        }
        /// <summary>
        /// Image url for expanded row state
        /// </summary>
        [UrlProperty()]
        public string ExpandedImageUrl
        {
            get
            {
                if (!string.IsNullOrEmpty(_expandedImageUrl)) return _expandedImageUrl;
                else return this.Page.ClientScript.GetWebResourceUrl(this.GetType(), "FrontDesk.Server.Web.Controls.Grid.images.collapse_grid.png");
            }

            set
            {
                _expandedImageUrl = value;
            }
        }
        #endregion





        #region Data Binding

        #region ICallbackEventHandler Members

        protected override string GetCallbackResult()
        {
            using (System.IO.StringWriter writer = new System.IO.StringWriter())
            {

                HtmlTextWriter htmlWr = new HtmlTextWriter(writer);
                if (_relatedDataContainer != null)
                {
                    _relatedDataContainer.RenderControl(htmlWr);
                }
                return writer.ToString();
            }
        }

        protected override void RaiseCallbackEvent(string eventArgument)
        {
            if (NestedDataBinding != null)
            {
                var args = new HierarDynamicGridRelatedDataBindingEventArg(eventArgument);
                NestedDataBinding(this, args);

                //read data
                _relatedDataContainer = DisplayRelatedTables(null, args.DataSource);



            }
        }

        Control _relatedDataContainer;

        protected virtual Panel DisplayRelatedTables(GridViewRow row, IEnumerable<object> dataSource)
        {
            Panel panel = null;
            DynamicControlsPlaceholder dcp = null;
            if (row != null)
            {
                //search the reference to the panel created by the HierarColumn
                dcp = (DynamicControlsPlaceholder)row.Cells[_hierarColumnID].FindControl("DCP");
            }


            if (dataSource != null && dataSource.Any())
            {
                //create the panel that contains all the child templates
                if (panel == null)
                {
                    panel = new Panel();
                    panel.ID = "Panel";
                    if (dcp != null)
                    {
                        dcp.Controls.Add(panel);
                    }
                    panel.Attributes.Add("style", "display:none");
                    if (row != null)
                    {
                        panel.CssClass = "HierarGrid_" + row.RowType.ToString();
                    }
                }


                //either load one template for all child rows of a related table
                if (_templateDataMode == TemplateDataModes.Table)
                {
                    LoadTemplateTable(panel, row, dataSource);
                }
                else if (_templateDataMode == TemplateDataModes.SingleRow)
                {
                    //or load a template for each child row of a related table


                    int drCounter = 0;
                    foreach (object dataRow in dataSource)
                    {

                        LoadTemplateSingleRow(drCounter, panel, row, dataRow);

                        drCounter++;
                    }
                }
            }
            if (row != null)
            {

                //if no child rows exist, hide the plus-minus icon
                if (panel == null)
                    row.Cells[_hierarColumnID].FindControl("Icon").Visible = false;
            }
            return panel;
        }


        /// <summary>
        /// Loads one instance of the template for each child row
        /// </summary>
        /// <param name="index">index of the DataRow in the Table</param>
        /// <param name="panel">Container in which the template is rendered</param>
        /// <param name="templateFilename">Filename of the template</param>
        /// <param name="item">DataGridItem that has just been databound</param>
        /// <param name="dataRow">DataRow of the child that should be displayed</param>
        /// <param name="relationName">Name of the data relation</param>
        protected virtual void LoadTemplateSingleRow(int index, Panel panel, GridViewRow item, object dataRow)
        {
            string rowName = "child" + "_" + index;

            Panel drPanel = LoadTemplateIntoPanel(panel, "Panel_" + rowName, "ChildTemplate_" + rowName, dataRow);

            drPanel.DataBind();
        }


        /// <summary>
        /// Loads one instance of the template for all child rows of a relation
        /// </summary>
        /// <param name="panel">Container in which the template is rendered</param>
        /// <param name="templateFilename">Filename of the template</param>
        /// <param name="item">DataGridItem that has just been databound</param>
        /// <param name="dataRows">DataRow array of the childs that should be displayed</param>
        /// <param name="relationName">Name of the data relation</param>
        protected virtual void LoadTemplateTable(Panel panel, GridViewRow item, IEnumerable<object> dataSource)
        {

            Panel drPanel = LoadTemplateIntoPanel(panel, "Panel_Child", "ChildTemplate_", dataSource);

            drPanel.DataBind();
        }


        /// <summary>
        /// Creates a new panel and loads the Template from the ASCX file into the panel
        /// </summary>
        /// <param name="panel">Container in which the template is rendered</param>
        /// <param name="templateFilename">Filename of the template</param>
        /// <param name="panelName">ID of the Panel that is created</param>
        /// <param name="templateName">ID of the Template that is loaded</param>
        /// <returns>a reference to the newly created panel that contains the template</returns>
        protected virtual Panel LoadTemplateIntoPanel(Panel panel, string panelName, string templateName, object item)
        {
            Panel drPanel = new Panel();
            drPanel.ID = panelName;
            panel.Controls.Add(drPanel);

            NestedItemTemplate container = new NestedItemTemplate(item);
            if (NestedItemTemplate != null)
            {

                NestedItemTemplate.InstantiateIn(container);
                container.Controls[0].ID = templateName;

            }
            else if (!string.IsNullOrEmpty(NestedItemTemplateFilename))
            {
                ITemplate template = Page.LoadTemplate(NestedItemTemplateFilename);
                template.InstantiateIn(container);
                drPanel.Controls[0].ID = templateName;
            }
            drPanel.Controls.Add(container);

            return drPanel;
        }

        protected virtual Panel LoadTemplateIntoPanel(Panel panel, string panelName, string templateName, IEnumerable<object> dataSource)
        {
            Panel drPanel = new Panel();
            drPanel.ID = panelName;
            panel.Controls.Add(drPanel);

            NestedTableTemplate container = new NestedTableTemplate(dataSource);

            if (NestedTableTemplate != null)
            {

                NestedTableTemplate.InstantiateIn(container);
                container.Controls[0].ID = templateName;
                drPanel.Controls.Add(container);
            }
            else if (!string.IsNullOrEmpty(NestedItemTemplateFilename))
            {
                ITemplate template = Page.LoadTemplate(NestedItemTemplateFilename);
                template.InstantiateIn(container);
                container.Controls[0].ID = templateName;
            }


            return drPanel;
        }


        #endregion

        public class HierarDynamicGridRelatedDataBindingEventArg : EventArgs
        {
            public string mainRowDataKey { get; set; }

            public IEnumerable<object> DataSource { get; set; }
            public HierarDynamicGridRelatedDataBindingEventArg(string mainRowDataKey)
            {
                this.mainRowDataKey = mainRowDataKey;
            }
        }

        public event EventHandler<HierarDynamicGridRelatedDataBindingEventArg> NestedDataBinding;

        #endregion

        #region Properties: Templates

        ITemplate _nestedItemTemplate = null;
        [
            PersistenceMode(PersistenceMode.InnerProperty),
            TemplateContainer(typeof(NestedItemTemplate))
        ]
        public ITemplate NestedItemTemplate
        {
            get { return _nestedItemTemplate; }
            set { _nestedItemTemplate = value; }
        }


        ITemplate _nestedTableTemplate = null;
        [
            PersistenceMode(PersistenceMode.InnerProperty),
            TemplateContainer(typeof(NestedTableTemplate))
        ]
        public ITemplate NestedTableTemplate
        {
            get { return _nestedTableTemplate; }
            set { _nestedTableTemplate = value; }
        }

        private string _nestedItemTemplateFilename = null;

        public string NestedItemTemplateFilename
        {
            get { return _nestedItemTemplateFilename; }
            set { _nestedItemTemplateFilename = value; }
        }

        #endregion

        private void RegisterCallbackMethods()
        {
            ClientScriptManager cm = Page.ClientScript;
            String cbReference = cm.GetCallbackEventReference(this, "arg",
                "ReceiveRelatedDataFromServer", "context");
            String callbackScript = "function GetRelatedDataFromServer(arg, context) {" +
                cbReference + "; }";
            cm.RegisterClientScriptBlock(this.GetType(),
                "GetRelatedDataFromServer", callbackScript, true);

            //KSA: use $find to get extender object by id on the page.

            string jscript = string.Format(@"
function ReceiveRelatedDataFromServer(response, callerId){{
$find(callerId).renderNestedContent(response); 
$(window).trigger(""{0}"");
}};",
ChildItemLoadedJSEventName);

            cm.RegisterClientScriptBlock(this.GetType(),
           "ReceiveRelatedDataFromServer", jscript, true);
        }

    }

    [Obfuscation(Feature = "renaming", Exclude = true, ApplyToMembers = true)]
    public class NestedItemTemplate : Control, INamingContainer
    {
        private object _rowItem = null;

        public NestedItemTemplate(object rowItem)
        {
            _rowItem = rowItem;
        }

        public object DataItem
        {

            get
            {
                return _rowItem;
            }
            set
            {
                _rowItem = value;
            }
        }
    }

    [Obfuscation(Feature = "renaming", Exclude = true, ApplyToMembers = true)]
    public class NestedTableTemplate : Control, INamingContainer
    {
        private IEnumerable<object> _dataSource = null;

        public NestedTableTemplate(IEnumerable<object> dataSource)
        {
            _dataSource = dataSource;
        }

        public IEnumerable<object> DataSource
        {

            get
            {
                return _dataSource;
            }
            set
            {
                _dataSource = value;
            }
        }
    }
}
