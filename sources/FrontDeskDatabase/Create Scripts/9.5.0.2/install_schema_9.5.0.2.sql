/*
Deployment script for Screendox

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Screendox"
:setvar DefaultFilePrefix "Screendox"
:setvar DefaultDataPath "D:\SQLDATA\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "D:\SQLDATA\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO


GO
PRINT N'Creating [frontdesk_appaccount]...';


GO
CREATE ROLE [frontdesk_appaccount]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [export]...';


GO
CREATE SCHEMA [export]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Hangfire]...';


GO
CREATE SCHEMA [Hangfire]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [export].[SmartExportLog]...';


GO
CREATE TABLE [export].[SmartExportLog] (
    [ScreeningResultID]  BIGINT             NOT NULL,
    [Succeed]            BIT                NOT NULL,
    [ExportDate]         DATETIMEOFFSET (7) NOT NULL,
    [FailedAttemptCount] INT                NOT NULL,
    [FailedReason]       NVARCHAR (256)     NULL,
    [LastError]          NVARCHAR (MAX)     NULL,
    [Completed]          BIT                NOT NULL,
    CONSTRAINT [PK_ExportedScreeningResult] PRIMARY KEY NONCLUSTERED ([ScreeningResultID] ASC, [Succeed] ASC)
);


GO
PRINT N'Creating [export].[SmartExportLog].[IX__SmartExportLog__Succeed]...';


GO
CREATE NONCLUSTERED INDEX [IX__SmartExportLog__Succeed]
    ON [export].[SmartExportLog]([Succeed] ASC, [Completed] ASC, [ScreeningResultID] ASC) WHERE Succeed = 1 AND Completed = 1;


GO
PRINT N'Creating [export].[PatientNameCorrectionLog]...';


GO
CREATE TABLE [export].[PatientNameCorrectionLog] (
    [ID]                   INT                IDENTITY (1, 1) NOT NULL,
    [OriginalPatientName]  NVARCHAR (400)     NOT NULL,
    [OriginalBirthday]     DATE               NOT NULL,
    [CreatedDate]          DATETIMEOFFSET (7) NOT NULL,
    [CorrectedPatientName] NVARCHAR (400)     NOT NULL,
    [CorrectedBirthday]    DATE               NOT NULL,
    [Comments]             NVARCHAR (MAX)     NOT NULL,
    CONSTRAINT [PK__PatientNameCorrectionLog] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [export].[PatientNameCorrectionLog].[IX__PatientNameCorrectionLog__CorrectedPatientName]...';


GO
CREATE NONCLUSTERED INDEX [IX__PatientNameCorrectionLog__CorrectedPatientName]
    ON [export].[PatientNameCorrectionLog]([CorrectedPatientName] ASC, [CorrectedBirthday] ASC);


GO
PRINT N'Creating [export].[PatientNameCorrectionLog].[IX__PatientNameCorrectionLog__CreatedDate]...';


GO
CREATE NONCLUSTERED INDEX [IX__PatientNameCorrectionLog__CreatedDate]
    ON [export].[PatientNameCorrectionLog]([CreatedDate] DESC);


GO
PRINT N'Creating [export].[PatientNameMap]...';


GO
CREATE TABLE [export].[PatientNameMap] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [Source]      NVARCHAR (128) NOT NULL,
    [Destination] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK__PatientNameMap] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [export].[PatientNameMap].[IX__PatientNameMap__Source]...';


GO
CREATE NONCLUSTERED INDEX [IX__PatientNameMap__Source]
    ON [export].[PatientNameMap]([Source] ASC);


GO
PRINT N'Creating [dbo].[AnswerScale]...';


GO
CREATE TABLE [dbo].[AnswerScale] (
    [AnswerScaleID] INT           NOT NULL,
    [Description]   NVARCHAR (24) NOT NULL,
    CONSTRAINT [PK_AnswerScale] PRIMARY KEY CLUSTERED ([AnswerScaleID] ASC)
);


GO
PRINT N'Creating [dbo].[AnswerScaleOption]...';


GO
CREATE TABLE [dbo].[AnswerScaleOption] (
    [AnswerScaleOptionID] INT           NOT NULL,
    [AnswerScaleID]       INT           NOT NULL,
    [OptionText]          NVARCHAR (48) NOT NULL,
    [OptionValue]         INT           NOT NULL,
    CONSTRAINT [PK_AnswerScaleOption] PRIMARY KEY CLUSTERED ([AnswerScaleOptionID] ASC)
);


GO
PRINT N'Creating [dbo].[BhsFollowUp]...';


GO
CREATE TABLE [dbo].[BhsFollowUp] (
    [ID]                                                BIGINT             IDENTITY (1, 1) NOT NULL,
    [ScreeningResultID]                                 BIGINT             NOT NULL,
    [BhsVisitID]                                        BIGINT             NOT NULL,
    [VisitDate]                                         DATETIMEOFFSET (7) NOT NULL,
    [CreatedDate]                                       DATETIMEOFFSET (7) NOT NULL,
    [BhsStaffNameCompleted]                             NVARCHAR (128)     NULL,
    [CompleteDate]                                      DATETIMEOFFSET (7) NULL,
    [PatientAttendedVisitID]                            INT                NULL,
    [FollowUpContactDate]                               DATETIMEOFFSET (7) NULL,
    [FollowUpContactOutcomeID]                          INT                NULL,
    [NewVisitReferralRecommendationID]                  INT                NULL,
    [NewVisitReferralRecommendationDescription]         NVARCHAR (MAX)     NULL,
    [NewVisitReferralRecommendationAcceptedID]          INT                NULL,
    [ReasonNewVisitReferralRecommendationNotAcceptedID] INT                NULL,
    [NewVisitDate]                                      DATETIMEOFFSET (7) NULL,
    [DischargedID]                                      INT                NULL,
    [ThirtyDatyFollowUpFlag]                            BIT                NOT NULL,
    [Notes]                                             NVARCHAR (MAX)     NULL,
    [ParentFollowUpID]                                  BIGINT             NULL,
    [FollowUpDate]                                      DATETIMEOFFSET (7) NOT NULL,
    [NewFollowUpDate]                                   DATETIMEOFFSET (7) NOT NULL,
    CONSTRAINT [PK_BhsFollowUp] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[BhsVisit]...';


GO
CREATE TABLE [dbo].[BhsVisit] (
    [ID]                                                BIGINT             IDENTITY (1, 1) NOT NULL,
    [ScreeningResultID]                                 BIGINT             NOT NULL,
    [LocationID]                                        INT                NOT NULL,
    [CreatedDate]                                       DATETIMEOFFSET (7) NOT NULL,
    [ScreeningDate]                                     DATETIMEOFFSET (7) NOT NULL,
    [TobacoExposureSmokerInHomeFlag]                    BIT                NOT NULL,
    [TobacoExposureCeremonyUseFlag]                     BIT                NOT NULL,
    [TobacoExposureSmokingFlag]                         BIT                NOT NULL,
    [TobacoExposureSmoklessFlag]                        BIT                NOT NULL,
    [AlcoholUseFlagScoreLevel]                          INT                NULL,
    [AlcoholUseFlagScoreLevelLabel]                     NVARCHAR (64)      NULL,
    [SubstanceAbuseFlagScoreLevel]                      INT                NULL,
    [SubstanceAbuseFlagScoreLevelLabel]                 NVARCHAR (64)      NULL,
    [DepressionFlagScoreLevel]                          INT                NULL,
    [DepressionFlagScoreLevelLabel]                     NVARCHAR (64)      NULL,
    [DepressionThinkOfDeathAnswer]                      NVARCHAR (64)      NULL,
    [PartnerViolenceFlagScoreLevel]                     INT                NULL,
    [PartnerViolenceFlagScoreLevelLabel]                NVARCHAR (64)      NULL,
    [NewVisitReferralRecommendationID]                  INT                NULL,
    [NewVisitReferralRecommendationDescription]         NVARCHAR (MAX)     NULL,
    [NewVisitReferralRecommendationAcceptedID]          INT                NULL,
    [ReasonNewVisitReferralRecommendationNotAcceptedID] INT                NULL,
    [NewVisitDate]                                      DATETIMEOFFSET (7) NULL,
    [DischargedID]                                      INT                NULL,
    [ThirtyDatyFollowUpFlag]                            BIT                NOT NULL,
    [Notes]                                             NVARCHAR (MAX)     NULL,
    [BhsStaffNameCompleted]                             NVARCHAR (128)     NULL,
    [CompleteDate]                                      DATETIMEOFFSET (7) NULL,
    [TreatmentAction1ID]                                INT                NULL,
    [TreatmentAction1Description]                       NVARCHAR (MAX)     NULL,
    [TreatmentAction2ID]                                INT                NULL,
    [TreatmentAction2Description]                       NVARCHAR (MAX)     NULL,
    [TreatmentAction3ID]                                INT                NULL,
    [TreatmentAction3Description]                       NVARCHAR (MAX)     NULL,
    [TreatmentAction4ID]                                INT                NULL,
    [TreatmentAction4Description]                       NVARCHAR (MAX)     NULL,
    [TreatmentAction5ID]                                INT                NULL,
    [TreatmentAction5Description]                       NVARCHAR (MAX)     NULL,
    [OtherScreeningTools]                               XML                NULL,
    [FollowUpDate]                                      DATETIMEOFFSET (7) NULL,
    CONSTRAINT [PK_BhsVisit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[BhsVisit].[IX__BhsVisit_ScreeningResultID]...';


GO
CREATE NONCLUSTERED INDEX [IX__BhsVisit_ScreeningResultID]
    ON [dbo].[BhsVisit]([ScreeningResultID] ASC);


GO
PRINT N'Creating [dbo].[BranchLocation]...';


GO
CREATE TABLE [dbo].[BranchLocation] (
    [BranchLocationID]   INT            IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (128) NOT NULL,
    [ScreeningProfileID] INT            NOT NULL,
    [Description]        NVARCHAR (MAX) NULL,
    [Disabled]           BIT            NOT NULL,
    CONSTRAINT [PK_BranchLocation] PRIMARY KEY CLUSTERED ([BranchLocationID] ASC)
);


GO
PRINT N'Creating [dbo].[BranchLocation].[IX_BranchLocation_Name]...';


GO
CREATE NONCLUSTERED INDEX [IX_BranchLocation_Name]
    ON [dbo].[BranchLocation]([Name] ASC);


GO
PRINT N'Creating [dbo].[County]...';


GO
CREATE TABLE [dbo].[County] (
    [Value]               NVARCHAR (128) NOT NULL,
    [LastModifiedDateUTC] DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([Value] ASC)
);


GO
PRINT N'Creating [dbo].[DbVersion]...';


GO
CREATE TABLE [dbo].[DbVersion] (
    [DbVersion]    VARCHAR (32) NOT NULL,
    [UpdatedOnUTC] DATETIME     NULL,
    CONSTRAINT [PK_DbVersion] PRIMARY KEY CLUSTERED ([DbVersion] ASC)
);


GO
PRINT N'Creating [dbo].[Discharged]...';


GO
CREATE TABLE [dbo].[Discharged] (
    [ID]         INT           NOT NULL,
    [Name]       NVARCHAR (64) NOT NULL,
    [OrderIndex] INT           NOT NULL,
    CONSTRAINT [PK_Discharged] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Discharged].[IX_Discharged_OrderIndex]...';


GO
CREATE NONCLUSTERED INDEX [IX_Discharged_OrderIndex]
    ON [dbo].[Discharged]([OrderIndex] DESC)
    INCLUDE([Name]);


GO
PRINT N'Creating [dbo].[DrugOfChoice]...';


GO
CREATE TABLE [dbo].[DrugOfChoice] (
    [ID]         INT           NOT NULL,
    [Name]       NVARCHAR (64) NOT NULL,
    [OrderIndex] INT           NOT NULL,
    CONSTRAINT [PK_DrugOfChoice] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DrugOfChoice].[IX_DrugOfChoice_OrderIndex]...';


GO
CREATE NONCLUSTERED INDEX [IX_DrugOfChoice_OrderIndex]
    ON [dbo].[DrugOfChoice]([OrderIndex] DESC)
    INCLUDE([Name]);


GO
PRINT N'Creating [dbo].[EducationLevel]...';


GO
CREATE TABLE [dbo].[EducationLevel] (
    [ID]                  INT           NOT NULL,
    [Name]                NVARCHAR (64) NOT NULL,
    [OrderIndex]          INT           NOT NULL,
    [LastModifiedDateUTC] DATETIME      NOT NULL,
    CONSTRAINT [PK_EducationLevel] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ErrorLog]...';


GO
CREATE TABLE [dbo].[ErrorLog] (
    [ErrorLogID]    BIGINT             IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [KioskID]       SMALLINT           NULL,
    [ErrorMessage]  NVARCHAR (MAX)     NULL,
    [ErrorTraceLog] NVARCHAR (MAX)     NULL,
    [CreatedDate]   DATETIMEOFFSET (7) NOT NULL,
    CONSTRAINT [PK_ErrorLog] PRIMARY KEY CLUSTERED ([ErrorLogID] ASC)
);


GO
PRINT N'Creating [dbo].[ErrorLog].[IX_ErrorLog_CreatedDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_ErrorLog_CreatedDate]
    ON [dbo].[ErrorLog]([CreatedDate] DESC)
    INCLUDE([KioskID], [ErrorMessage]);


GO
PRINT N'Creating [dbo].[FollowUpContactOutcome]...';


GO
CREATE TABLE [dbo].[FollowUpContactOutcome] (
    [ID]         INT           NOT NULL,
    [Name]       NVARCHAR (64) NOT NULL,
    [OrderIndex] INT           NOT NULL,
    CONSTRAINT [PK_FollowUpContactOutcome] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Gender]...';


GO
CREATE TABLE [dbo].[Gender] (
    [ID]                  INT           NOT NULL,
    [Name]                NVARCHAR (64) NOT NULL,
    [OrderIndex]          INT           NOT NULL,
    [LastModifiedDateUTC] DATETIME      NOT NULL,
    CONSTRAINT [PK_Gender] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Kiosk]...';


GO
CREATE TABLE [dbo].[Kiosk] (
    [KioskID]          SMALLINT           IDENTITY (1000, 1) NOT NULL,
    [KioskName]        NVARCHAR (255)     NOT NULL,
    [Description]      NVARCHAR (MAX)     NULL,
    [CreatedDate]      DATETIMEOFFSET (7) NOT NULL,
    [LastActivityDate] DATETIMEOFFSET (7) NULL,
    [BranchLocationID] INT                NOT NULL,
    [Disabled]         BIT                NOT NULL,
    [IpAddress]        VARCHAR (45)       NULL,
    [KioskAppVersion]  VARCHAR (16)       NULL,
    [SecretKey]        VARCHAR (64)       NULL,
    CONSTRAINT [PK_Kiosk] PRIMARY KEY CLUSTERED ([KioskID] ASC),
    CONSTRAINT [UQ__Kiosk] UNIQUE NONCLUSTERED ([KioskName] ASC)
);


GO
PRINT N'Creating [dbo].[License]...';


GO
CREATE TABLE [dbo].[License] (
    [LicenseKey]            VARCHAR (128)      NOT NULL,
    [ActivationKey]         VARCHAR (128)      NULL,
    [ActivationRequest]     VARCHAR (128)      NULL,
    [CreatedDate]           DATETIMEOFFSET (7) NOT NULL,
    [ActivationRequestDate] DATETIMEOFFSET (7) NULL,
    [ActivatedDate]         DATETIMEOFFSET (7) NULL,
    CONSTRAINT [PK_License] PRIMARY KEY CLUSTERED ([LicenseKey] ASC)
);


GO
PRINT N'Creating [dbo].[LivingOnReservation]...';


GO
CREATE TABLE [dbo].[LivingOnReservation] (
    [ID]                  INT           NOT NULL,
    [Name]                NVARCHAR (64) NOT NULL,
    [OrderIndex]          INT           NOT NULL,
    [LastModifiedDateUTC] DATETIME      NOT NULL,
    CONSTRAINT [PK_LivingOnReservation] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[LookupValuesDeleteLog]...';


GO
CREATE TABLE [dbo].[LookupValuesDeleteLog] (
    [TableName]           NVARCHAR (64)  NOT NULL,
    [ID]                  INT            NULL,
    [Name]                NVARCHAR (128) NULL,
    [LastModifiedDateUTC] DATETIME       NOT NULL
);


GO
PRINT N'Creating [dbo].[MaritalStatus]...';


GO
CREATE TABLE [dbo].[MaritalStatus] (
    [ID]                  INT           NOT NULL,
    [Name]                NVARCHAR (64) NOT NULL,
    [OrderIndex]          INT           NOT NULL,
    [LastModifiedDateUTC] DATETIME      NOT NULL,
    CONSTRAINT [PK_MaritalStatus] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[MilitaryExperience]...';


GO
CREATE TABLE [dbo].[MilitaryExperience] (
    [ID]                  INT           NOT NULL,
    [Name]                NVARCHAR (64) NOT NULL,
    [OrderIndex]          INT           NOT NULL,
    [LastModifiedDateUTC] DATETIME      NOT NULL,
    CONSTRAINT [PK_MilitaryExperience] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[NewVisitReferralRecommendation]...';


GO
CREATE TABLE [dbo].[NewVisitReferralRecommendation] (
    [ID]         INT           NOT NULL,
    [Name]       NVARCHAR (64) NOT NULL,
    [OrderIndex] INT           NOT NULL,
    CONSTRAINT [PK_NewVisitReferralRecommendation] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[NewVisitReferralRecommendation].[IX_NewVisitReferralRecommendation_OrderIndex]...';


GO
CREATE NONCLUSTERED INDEX [IX_NewVisitReferralRecommendation_OrderIndex]
    ON [dbo].[NewVisitReferralRecommendation]([OrderIndex] DESC)
    INCLUDE([Name]);


GO
PRINT N'Creating [dbo].[NewVisitReferralRecommendationAccepted]...';


GO
CREATE TABLE [dbo].[NewVisitReferralRecommendationAccepted] (
    [ID]         INT           NOT NULL,
    [Name]       NVARCHAR (64) NOT NULL,
    [OrderIndex] INT           NOT NULL,
    CONSTRAINT [PK_NewVisitReferralRecommendationAccepted] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[NewVisitReferralRecommendationAccepted].[IX_NewVisitReferralRecommendationAccepted_OrderIndex]...';


GO
CREATE NONCLUSTERED INDEX [IX_NewVisitReferralRecommendationAccepted_OrderIndex]
    ON [dbo].[NewVisitReferralRecommendationAccepted]([OrderIndex] DESC)
    INCLUDE([Name]);


GO
PRINT N'Creating [dbo].[PatientAttendedVisit]...';


GO
CREATE TABLE [dbo].[PatientAttendedVisit] (
    [ID]         INT           NOT NULL,
    [Name]       NVARCHAR (64) NOT NULL,
    [OrderIndex] INT           NOT NULL,
    CONSTRAINT [PK_PatientAttendedVisit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Race]...';


GO
CREATE TABLE [dbo].[Race] (
    [ID]                  INT           NOT NULL,
    [Name]                NVARCHAR (64) NOT NULL,
    [OrderIndex]          INT           NOT NULL,
    [LastModifiedDateUTC] DATETIME      NOT NULL,
    CONSTRAINT [PK_Race] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ReasonNewVisitReferralRecommendationNotAccepted]...';


GO
CREATE TABLE [dbo].[ReasonNewVisitReferralRecommendationNotAccepted] (
    [ID]         INT           NOT NULL,
    [Name]       NVARCHAR (64) NOT NULL,
    [OrderIndex] INT           NOT NULL,
    CONSTRAINT [PK_ReasonNewVisitReferralRecommendationNotAccepted] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ReasonNewVisitReferralRecommendationNotAccepted].[IX_ReasonNewVisitReferralRecommendationNotAccepted_OrderIndex]...';


GO
CREATE NONCLUSTERED INDEX [IX_ReasonNewVisitReferralRecommendationNotAccepted_OrderIndex]
    ON [dbo].[ReasonNewVisitReferralRecommendationNotAccepted]([OrderIndex] DESC)
    INCLUDE([Name]);


GO
PRINT N'Creating [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [Rolename] VARCHAR (255) NOT NULL,
    CONSTRAINT [PKRoles] PRIMARY KEY CLUSTERED ([Rolename] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [dbo].[RpmsCredentials]...';


GO
CREATE TABLE [dbo].[RpmsCredentials] (
    [Id]         UNIQUEIDENTIFIER NOT NULL,
    [AccessCode] NVARCHAR (MAX)   NULL,
    [VerifyCode] NVARCHAR (MAX)   NULL,
    [ExpireAt]   DATETIME         NOT NULL,
    CONSTRAINT [PK__RpmsCredentials] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Screening]...';


GO
CREATE TABLE [dbo].[Screening] (
    [ScreeningID]   CHAR (4)     NOT NULL,
    [ScreeningName] VARCHAR (28) NOT NULL,
    CONSTRAINT [PK_Screening] PRIMARY KEY CLUSTERED ([ScreeningID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningFrequency]...';


GO
CREATE TABLE [dbo].[ScreeningFrequency] (
    [ID]                  VARCHAR (16) NOT NULL,
    [Frequency]           INT          NOT NULL,
    [LastModifiedDateUTC] DATETIME     NOT NULL,
    CONSTRAINT [PK_ScreeningFrequency] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningProfile]...';


GO
CREATE TABLE [dbo].[ScreeningProfile] (
    [ID]                  INT            IDENTITY (1, 1) NOT NULL,
    [Name]                NVARCHAR (128) NOT NULL,
    [Description]         NVARCHAR (MAX) NULL,
    [LastModifiedDateUTC] DATETIME       NOT NULL,
    CONSTRAINT [PK_ScreeningProfile] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningProfileFrequency]...';


GO
CREATE TABLE [dbo].[ScreeningProfileFrequency] (
    [ScreeningProfileID]  INT      NOT NULL,
    [ScreeningSectionID]  CHAR (5) NOT NULL,
    [Frequency]           INT      NOT NULL,
    [LastModifiedDateUTC] DATETIME NOT NULL,
    CONSTRAINT [PK__ScreeningProfileFrequency] PRIMARY KEY CLUSTERED ([ScreeningProfileID] ASC, [ScreeningSectionID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningProfileSectionAge]...';


GO
CREATE TABLE [dbo].[ScreeningProfileSectionAge] (
    [ScreeningProfileID]   INT      NOT NULL,
    [ScreeningSectionID]   CHAR (5) NOT NULL,
    [MinimalAge]           TINYINT  NOT NULL,
    [IsEnabled]            BIT      NOT NULL,
    [LastModifiedDateUTC]  DATETIME NOT NULL,
    [AgeIsNotConfigurable] BIT      NOT NULL,
    CONSTRAINT [PK__ScreeningProfileSectionAge] PRIMARY KEY CLUSTERED ([ScreeningProfileID] ASC, [ScreeningSectionID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningScoreLevel]...';


GO
CREATE TABLE [dbo].[ScreeningScoreLevel] (
    [ScreeningSectionID] CHAR (5)       NOT NULL,
    [ScoreLevel]         INT            NOT NULL,
    [Name]               NVARCHAR (64)  NOT NULL,
    [Indicates]          NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_ScreeningScoreLevel] PRIMARY KEY CLUSTERED ([ScreeningSectionID] ASC, [ScoreLevel] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningSection]...';


GO
CREATE TABLE [dbo].[ScreeningSection] (
    [ScreeningSectionID]        CHAR (5)       NOT NULL,
    [ScreeningID]               CHAR (4)       NOT NULL,
    [ScreeningSectionName]      VARCHAR (64)   NOT NULL,
    [ScreeningSectionShortName] VARCHAR (16)   NOT NULL,
    [QuestionText]              NVARCHAR (MAX) NOT NULL,
    [OrderIndex]                TINYINT        NOT NULL,
    CONSTRAINT [PK_ScreeningSection] PRIMARY KEY CLUSTERED ([ScreeningSectionID] ASC),
    CONSTRAINT [UQ_ScreeningSection] UNIQUE NONCLUSTERED ([ScreeningSectionID] ASC, [ScreeningID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningSection].[IX_ScreeningSection_OrderIndex]...';


GO
CREATE NONCLUSTERED INDEX [IX_ScreeningSection_OrderIndex]
    ON [dbo].[ScreeningSection]([OrderIndex] ASC, [ScreeningID] ASC);


GO
PRINT N'Creating [dbo].[ScreeningSectionAge]...';


GO
CREATE TABLE [dbo].[ScreeningSectionAge] (
    [ScreeningSectionID]   CHAR (5) NOT NULL,
    [MinimalAge]           TINYINT  NOT NULL,
    [IsEnabled]            BIT      NOT NULL,
    [LastModifiedDateUTC]  DATETIME NOT NULL,
    [AgeIsNotConfigurable] BIT      NOT NULL,
    CONSTRAINT [PK_ScreeningSectionAge] PRIMARY KEY CLUSTERED ([ScreeningSectionID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningSectionQuestion]...';


GO
CREATE TABLE [dbo].[ScreeningSectionQuestion] (
    [QuestionID]         INT            NOT NULL,
    [ScreeningSectionID] CHAR (5)       NOT NULL,
    [PreambleText]       NVARCHAR (MAX) NULL,
    [QuestionText]       NVARCHAR (MAX) NOT NULL,
    [AnswerScaleID]      INT            NOT NULL,
    [IsMainQuestion]     BIT            NOT NULL,
    [OrderIndex]         INT            NOT NULL,
    CONSTRAINT [PK_ScreeningSectionQuestion] PRIMARY KEY CLUSTERED ([ScreeningSectionID] ASC, [QuestionID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningSectionQuestionResult]...';


GO
CREATE TABLE [dbo].[ScreeningSectionQuestionResult] (
    [ScreeningResultID]  BIGINT   NOT NULL,
    [ScreeningSectionID] CHAR (5) NOT NULL,
    [QuestionID]         INT      NOT NULL,
    [AnswerValue]        INT      NOT NULL,
    CONSTRAINT [PK_ScreeningSectionQuestionResult] PRIMARY KEY CLUSTERED ([ScreeningResultID] ASC, [ScreeningSectionID] ASC, [QuestionID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningSectionQuestionResult].[IX__ScreeningSectionQuestionResult_Answer]...';


GO
CREATE NONCLUSTERED INDEX [IX__ScreeningSectionQuestionResult_Answer]
    ON [dbo].[ScreeningSectionQuestionResult]([ScreeningSectionID] ASC, [QuestionID] ASC, [AnswerValue] ASC)
    INCLUDE([ScreeningResultID]);


GO
PRINT N'Creating [dbo].[ScreeningSectionResult]...';


GO
CREATE TABLE [dbo].[ScreeningSectionResult] (
    [ScreeningResultID]  BIGINT   NOT NULL,
    [ScreeningSectionID] CHAR (5) NOT NULL,
    [AnswerValue]        INT      NOT NULL,
    [Score]              INT      NULL,
    [ScoreLevel]         INT      NULL,
    CONSTRAINT [PK_ScreeningSectionResult] PRIMARY KEY CLUSTERED ([ScreeningResultID] ASC, [ScreeningSectionID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningTimeLog]...';


GO
CREATE TABLE [dbo].[ScreeningTimeLog] (
    [ID]                 BIGINT             IDENTITY (1, 1) NOT NULL,
    [ScreeningResultID]  BIGINT             NOT NULL,
    [ScreeningSectionID] CHAR (5)           NULL,
    [StartDate]          DATETIMEOFFSET (7) NOT NULL,
    [EndDate]            DATETIMEOFFSET (7) NOT NULL,
    [DurationInSeconds]  AS                 CONVERT (INT, DATEDIFF(SECOND, StartDate, EndDate)) PERSISTED,
    CONSTRAINT [PK_ScreeningTimeLog] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQ_ScreeningTimeLog] UNIQUE NONCLUSTERED ([ScreeningResultID] ASC, [ScreeningSectionID] ASC)
);


GO
PRINT N'Creating [dbo].[SecurityEvent]...';


GO
CREATE TABLE [dbo].[SecurityEvent] (
    [SecurityEventID]         INT            NOT NULL,
    [SecurityEventCategoryID] INT            NOT NULL,
    [Description]             NVARCHAR (255) NOT NULL,
    [Enabled]                 BIT            NOT NULL,
    CONSTRAINT [PK_SecurityLogAction] PRIMARY KEY CLUSTERED ([SecurityEventID] ASC)
);


GO
PRINT N'Creating [dbo].[SecurityEventCategory]...';


GO
CREATE TABLE [dbo].[SecurityEventCategory] (
    [SecurityEventCategoryID] INT            NOT NULL,
    [CategoryName]            NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_SecurityEventCategory] PRIMARY KEY CLUSTERED ([SecurityEventCategoryID] ASC)
);


GO
PRINT N'Creating [dbo].[SecurityLog]...';


GO
CREATE TABLE [dbo].[SecurityLog] (
    [PKID]            INT                NOT NULL,
    [LogDate]         DATETIMEOFFSET (7) NOT NULL,
    [SecurityEventID] INT                NOT NULL,
    [Metadata]        SQL_VARIANT        NULL,
    [RelatedBranchID] INT                NULL,
    [ID]              BIGINT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_SecurityLog] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQ_SecurityLog] UNIQUE NONCLUSTERED ([LogDate] ASC, [PKID] ASC, [ID] ASC)
);


GO
PRINT N'Creating [dbo].[SecurityQuestion]...';


GO
CREATE TABLE [dbo].[SecurityQuestion] (
    [QuestionID]   INT            IDENTITY (1, 1) NOT NULL,
    [QuestionText] NVARCHAR (255) NOT NULL,
    CONSTRAINT [PK_SecurityQuestion] PRIMARY KEY CLUSTERED ([QuestionID] ASC)
);


GO
PRINT N'Creating [dbo].[SexualOrientation]...';


GO
CREATE TABLE [dbo].[SexualOrientation] (
    [ID]                  INT           NOT NULL,
    [Name]                NVARCHAR (64) NOT NULL,
    [OrderIndex]          INT           NOT NULL,
    [LastModifiedDateUTC] DATETIME      NOT NULL,
    CONSTRAINT [PK_SexualOrientation] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[State]...';


GO
CREATE TABLE [dbo].[State] (
    [StateCode]   CHAR (2)       NOT NULL,
    [CountryCode] VARCHAR (2)    NOT NULL,
    [Name]        NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_State] PRIMARY KEY CLUSTERED ([StateCode] ASC, [CountryCode] ASC),
    CONSTRAINT [UQ_State] UNIQUE NONCLUSTERED ([StateCode] ASC)
);


GO
PRINT N'Creating [dbo].[State].[IX_State_Name]...';


GO
CREATE NONCLUSTERED INDEX [IX_State_Name]
    ON [dbo].[State]([Name] ASC);


GO
PRINT N'Creating [dbo].[SystemSettings]...';


GO
CREATE TABLE [dbo].[SystemSettings] (
    [Key]         NVARCHAR (128) NOT NULL,
    [Value]       NVARCHAR (255) NULL,
    [Name]        NVARCHAR (255) NULL,
    [Description] NVARCHAR (255) NULL,
    [RegExp]      NVARCHAR (255) NULL,
    [IsExposed]   BIT            NULL,
    CONSTRAINT [PK_SystemSettinge] PRIMARY KEY CLUSTERED ([Key] ASC)
);


GO
PRINT N'Creating [dbo].[TreatmentAction]...';


GO
CREATE TABLE [dbo].[TreatmentAction] (
    [ID]         INT           NOT NULL,
    [Name]       NVARCHAR (64) NOT NULL,
    [OrderIndex] INT           NOT NULL,
    CONSTRAINT [PK_TreatmentAction] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Tribe]...';


GO
CREATE TABLE [dbo].[Tribe] (
    [Value]               NVARCHAR (128) NOT NULL,
    [LastModifiedDateUTC] DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([Value] ASC)
);


GO
PRINT N'Creating [dbo].[UserPasswordHistory]...';


GO
CREATE TABLE [dbo].[UserPasswordHistory] (
    [PKID]      INT            NOT NULL,
    [Password1] NVARCHAR (128) NOT NULL,
    [Password2] NVARCHAR (128) NULL,
    CONSTRAINT [PK_UserPasswordHistory] PRIMARY KEY CLUSTERED ([PKID] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [PKID]                                   INT            IDENTITY (1, 1) NOT NULL,
    [Username]                               NVARCHAR (255) NOT NULL,
    [Email]                                  NVARCHAR (255) NULL,
    [Comment]                                NTEXT          NULL,
    [Password]                               NVARCHAR (128) NOT NULL,
    [PasswordQuestion]                       NVARCHAR (255) NULL,
    [PasswordAnswer]                         NVARCHAR (255) NULL,
    [IsApproved]                             BIT            NULL,
    [LastActivityDate]                       DATETIME       NULL,
    [LastLoginDate]                          DATETIME       NULL,
    [LastPasswordChangedDate]                DATETIME       NULL,
    [CreationDate]                           DATETIME       NULL,
    [IsOnLine]                               BIT            NULL,
    [IsLockedOut]                            BIT            NULL,
    [LastLockedOutDate]                      DATETIME       NULL,
    [FailedPasswordAttemptCount]             INT            NULL,
    [FailedPasswordAttemptWindowStart]       DATETIME       NULL,
    [FailedPasswordAnswerAttemptCount]       INT            NULL,
    [FailedPasswordAnswerAttemptWindowStart] DATETIME       NULL,
    CONSTRAINT [PK__Users] PRIMARY KEY NONCLUSTERED ([PKID] ASC),
    CONSTRAINT [UQ__Users] UNIQUE NONCLUSTERED ([Username] ASC)
);


GO
PRINT N'Creating [dbo].[Users_BranchLocation]...';


GO
CREATE TABLE [dbo].[Users_BranchLocation] (
    [UserID]           INT NOT NULL,
    [BranchLocationID] INT NOT NULL,
    CONSTRAINT [UQ_UsersBranchLocation_UserID] UNIQUE NONCLUSTERED ([UserID] ASC)
);


GO
PRINT N'Creating [dbo].[UsersInRoles]...';


GO
CREATE TABLE [dbo].[UsersInRoles] (
    [Username] NVARCHAR (255) NOT NULL,
    [Rolename] VARCHAR (255)  NOT NULL,
    CONSTRAINT [PKUsersInRoles] PRIMARY KEY CLUSTERED ([Username] ASC, [Rolename] ASC)
);


GO
PRINT N'Creating [dbo].[VisitSettings]...';


GO
CREATE TABLE [dbo].[VisitSettings] (
    [MeasureToolId]       CHAR (5)     NOT NULL,
    [Name]                VARCHAR (64) NOT NULL,
    [IsEnabled]           BIT          NOT NULL,
    [OrderIndex]          TINYINT      NOT NULL,
    [LastModifiedDateUTC] DATETIME     NOT NULL,
    CONSTRAINT [PK_VisitSettings] PRIMARY KEY CLUSTERED ([MeasureToolId] ASC)
);


GO
PRINT N'Creating [dbo].[VisitSettings].[IX_VisitSettings_OrderIndex]...';


GO
CREATE NONCLUSTERED INDEX [IX_VisitSettings_OrderIndex]
    ON [dbo].[VisitSettings]([OrderIndex] ASC, [MeasureToolId] ASC, [Name] ASC);


GO
PRINT N'Creating [dbo].[DF_BranchLocation_Disabled]...';


GO
ALTER TABLE [dbo].[BranchLocation]
    ADD CONSTRAINT [DF_BranchLocation_Disabled] DEFAULT (0) FOR [Disabled];


GO
PRINT N'Creating [dbo].[DF__County__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[County]
    ADD CONSTRAINT [DF__County__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF_DbVersion_UpdatedOn]...';


GO
ALTER TABLE [dbo].[DbVersion]
    ADD CONSTRAINT [DF_DbVersion_UpdatedOn] DEFAULT (GETUTCDATE()) FOR [UpdatedOnUTC];


GO
PRINT N'Creating [dbo].[DF__EducationLevel__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[EducationLevel]
    ADD CONSTRAINT [DF__EducationLevel__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF__Gender__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[Gender]
    ADD CONSTRAINT [DF__Gender__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF_Kiosk_Disabled]...';


GO
ALTER TABLE [dbo].[Kiosk]
    ADD CONSTRAINT [DF_Kiosk_Disabled] DEFAULT (0) FOR [Disabled];


GO
PRINT N'Creating [dbo].[DF__LivingOnReservation__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[LivingOnReservation]
    ADD CONSTRAINT [DF__LivingOnReservation__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF__LookupValuesDeleteLog__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[LookupValuesDeleteLog]
    ADD CONSTRAINT [DF__LookupValuesDeleteLog__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF__MaritalStatus__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[MaritalStatus]
    ADD CONSTRAINT [DF__MaritalStatus__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF__MilitaryExperience__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[MilitaryExperience]
    ADD CONSTRAINT [DF__MilitaryExperience__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF__Race__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[Race]
    ADD CONSTRAINT [DF__Race__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF__ScreeningProfile__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[ScreeningProfile]
    ADD CONSTRAINT [DF__ScreeningProfile__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating unnamed constraint on [dbo].[ScreeningProfileSectionAge]...';


GO
ALTER TABLE [dbo].[ScreeningProfileSectionAge]
    ADD DEFAULT 1 FOR [IsEnabled];


GO
PRINT N'Creating [dbo].[DF__ScreeningProfileSectionAge_AgeIsNotConfigurable]...';


GO
ALTER TABLE [dbo].[ScreeningProfileSectionAge]
    ADD CONSTRAINT [DF__ScreeningProfileSectionAge_AgeIsNotConfigurable] DEFAULT (0) FOR [AgeIsNotConfigurable];


GO
PRINT N'Creating unnamed constraint on [dbo].[ScreeningSectionAge]...';


GO
ALTER TABLE [dbo].[ScreeningSectionAge]
    ADD DEFAULT 1 FOR [IsEnabled];


GO
PRINT N'Creating [dbo].[DF__ScreeningSectionAge_AgeIsNotConfigurable]...';


GO
ALTER TABLE [dbo].[ScreeningSectionAge]
    ADD CONSTRAINT [DF__ScreeningSectionAge_AgeIsNotConfigurable] DEFAULT (0) FOR [AgeIsNotConfigurable];


GO
PRINT N'Creating [dbo].[DF_SecurityEvent_Enabled]...';


GO
ALTER TABLE [dbo].[SecurityEvent]
    ADD CONSTRAINT [DF_SecurityEvent_Enabled] DEFAULT (0) FOR [Enabled];


GO
PRINT N'Creating [dbo].[DF__SexualOrientation__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[SexualOrientation]
    ADD CONSTRAINT [DF__SexualOrientation__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF__Tribe__LastModifiedDateUTC]...';


GO
ALTER TABLE [dbo].[Tribe]
    ADD CONSTRAINT [DF__Tribe__LastModifiedDateUTC] DEFAULT GETUTCDATE() FOR [LastModifiedDateUTC];


GO
PRINT N'Creating [dbo].[DF_VisitSettings_IsEnabled]...';


GO
ALTER TABLE [dbo].[VisitSettings]
    ADD CONSTRAINT [DF_VisitSettings_IsEnabled] DEFAULT 1 FOR [IsEnabled];


GO
PRINT N'Creating [dbo].[FK_AnswerScaleOption__AnswerScaleID]...';


GO
ALTER TABLE [dbo].[AnswerScaleOption]
    ADD CONSTRAINT [FK_AnswerScaleOption__AnswerScaleID] FOREIGN KEY ([AnswerScaleID]) REFERENCES [dbo].[AnswerScale] ([AnswerScaleID]);


GO
PRINT N'Creating [dbo].[FK_BhsFollowUp__BhsVisit]...';


GO
ALTER TABLE [dbo].[BhsFollowUp]
    ADD CONSTRAINT [FK_BhsFollowUp__BhsVisit] FOREIGN KEY ([BhsVisitID]) REFERENCES [dbo].[BhsVisit] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsFollowUp__PatientAttendedVisit]...';


GO
ALTER TABLE [dbo].[BhsFollowUp]
    ADD CONSTRAINT [FK_BhsFollowUp__PatientAttendedVisit] FOREIGN KEY ([PatientAttendedVisitID]) REFERENCES [dbo].[PatientAttendedVisit] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsFollowUp__FollowUpContactOutcome]...';


GO
ALTER TABLE [dbo].[BhsFollowUp]
    ADD CONSTRAINT [FK_BhsFollowUp__FollowUpContactOutcome] FOREIGN KEY ([FollowUpContactOutcomeID]) REFERENCES [dbo].[FollowUpContactOutcome] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsFollowUp__NewVisitReferralRecommendation]...';


GO
ALTER TABLE [dbo].[BhsFollowUp]
    ADD CONSTRAINT [FK_BhsFollowUp__NewVisitReferralRecommendation] FOREIGN KEY ([NewVisitReferralRecommendationID]) REFERENCES [dbo].[NewVisitReferralRecommendation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsFollowUp__NewVisitReferralRecommendationAccepted]...';


GO
ALTER TABLE [dbo].[BhsFollowUp]
    ADD CONSTRAINT [FK_BhsFollowUp__NewVisitReferralRecommendationAccepted] FOREIGN KEY ([NewVisitReferralRecommendationAcceptedID]) REFERENCES [dbo].[NewVisitReferralRecommendationAccepted] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsFollowUp__ReasonNewVisitReferralRecommendationNotAccepted]...';


GO
ALTER TABLE [dbo].[BhsFollowUp]
    ADD CONSTRAINT [FK_BhsFollowUp__ReasonNewVisitReferralRecommendationNotAccepted] FOREIGN KEY ([ReasonNewVisitReferralRecommendationNotAcceptedID]) REFERENCES [dbo].[ReasonNewVisitReferralRecommendationNotAccepted] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsFollowUp__Discharged]...';


GO
ALTER TABLE [dbo].[BhsFollowUp]
    ADD CONSTRAINT [FK_BhsFollowUp__Discharged] FOREIGN KEY ([DischargedID]) REFERENCES [dbo].[Discharged] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsFollowUp__BhsFollowUp]...';


GO
ALTER TABLE [dbo].[BhsFollowUp]
    ADD CONSTRAINT [FK_BhsFollowUp__BhsFollowUp] FOREIGN KEY ([ParentFollowUpID]) REFERENCES [dbo].[BhsFollowUp] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__BranchLocation]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__BranchLocation] FOREIGN KEY ([LocationID]) REFERENCES [dbo].[BranchLocation] ([BranchLocationID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__NewVisitReferralRecommendation]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__NewVisitReferralRecommendation] FOREIGN KEY ([NewVisitReferralRecommendationID]) REFERENCES [dbo].[NewVisitReferralRecommendation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__NewVisitReferralRecommendationAccepted]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__NewVisitReferralRecommendationAccepted] FOREIGN KEY ([NewVisitReferralRecommendationAcceptedID]) REFERENCES [dbo].[NewVisitReferralRecommendationAccepted] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__ReasonNewVisitReferralRecommendationNotAccepted]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__ReasonNewVisitReferralRecommendationNotAccepted] FOREIGN KEY ([ReasonNewVisitReferralRecommendationNotAcceptedID]) REFERENCES [dbo].[ReasonNewVisitReferralRecommendationNotAccepted] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__Discharged]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__Discharged] FOREIGN KEY ([DischargedID]) REFERENCES [dbo].[Discharged] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__TreatmentAction1]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__TreatmentAction1] FOREIGN KEY ([TreatmentAction1ID]) REFERENCES [dbo].[TreatmentAction] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__TreatmentAction2]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__TreatmentAction2] FOREIGN KEY ([TreatmentAction2ID]) REFERENCES [dbo].[TreatmentAction] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__TreatmentAction3]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__TreatmentAction3] FOREIGN KEY ([TreatmentAction3ID]) REFERENCES [dbo].[TreatmentAction] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__TreatmentAction4]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__TreatmentAction4] FOREIGN KEY ([TreatmentAction4ID]) REFERENCES [dbo].[TreatmentAction] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__TreatmentAction5]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__TreatmentAction5] FOREIGN KEY ([TreatmentAction5ID]) REFERENCES [dbo].[TreatmentAction] ([ID]);


GO
PRINT N'Creating [dbo].[FK__BranchLocation__ScreeningProfile]...';


GO
ALTER TABLE [dbo].[BranchLocation]
    ADD CONSTRAINT [FK__BranchLocation__ScreeningProfile] FOREIGN KEY ([ScreeningProfileID]) REFERENCES [dbo].[ScreeningProfile] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Kiosk_BranchLocation]...';


GO
ALTER TABLE [dbo].[Kiosk]
    ADD CONSTRAINT [FK_Kiosk_BranchLocation] FOREIGN KEY ([BranchLocationID]) REFERENCES [dbo].[BranchLocation] ([BranchLocationID]);


GO
PRINT N'Creating [dbo].[FK___ScreeningProfile]...';


GO
ALTER TABLE [dbo].[ScreeningProfileFrequency]
    ADD CONSTRAINT [FK___ScreeningProfile] FOREIGN KEY ([ScreeningProfileID]) REFERENCES [dbo].[ScreeningProfile] ([ID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK__ScreeningProfileFrequency__ScreeningSection]...';


GO
ALTER TABLE [dbo].[ScreeningProfileFrequency]
    ADD CONSTRAINT [FK__ScreeningProfileFrequency__ScreeningSection] FOREIGN KEY ([ScreeningSectionID]) REFERENCES [dbo].[ScreeningSection] ([ScreeningSectionID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK__ScreeningProfileSectionAge__ScreeningSection]...';


GO
ALTER TABLE [dbo].[ScreeningProfileSectionAge]
    ADD CONSTRAINT [FK__ScreeningProfileSectionAge__ScreeningSection] FOREIGN KEY ([ScreeningSectionID]) REFERENCES [dbo].[ScreeningSection] ([ScreeningSectionID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ScreeningScoreLevel__ScreeningSection]...';


GO
ALTER TABLE [dbo].[ScreeningScoreLevel]
    ADD CONSTRAINT [FK_ScreeningScoreLevel__ScreeningSection] FOREIGN KEY ([ScreeningSectionID]) REFERENCES [dbo].[ScreeningSection] ([ScreeningSectionID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ScreeningSection__Screening]...';


GO
ALTER TABLE [dbo].[ScreeningSection]
    ADD CONSTRAINT [FK_ScreeningSection__Screening] FOREIGN KEY ([ScreeningID]) REFERENCES [dbo].[Screening] ([ScreeningID]);


GO
PRINT N'Creating [dbo].[FK_ScreeningSectionAge__ScreeningSection]...';


GO
ALTER TABLE [dbo].[ScreeningSectionAge]
    ADD CONSTRAINT [FK_ScreeningSectionAge__ScreeningSection] FOREIGN KEY ([ScreeningSectionID]) REFERENCES [dbo].[ScreeningSection] ([ScreeningSectionID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ScreeningSectionQuestion__ScreeningSection]...';


GO
ALTER TABLE [dbo].[ScreeningSectionQuestion]
    ADD CONSTRAINT [FK_ScreeningSectionQuestion__ScreeningSection] FOREIGN KEY ([ScreeningSectionID]) REFERENCES [dbo].[ScreeningSection] ([ScreeningSectionID]);


GO
PRINT N'Creating [dbo].[FK_ScreeningSectionQuestion__AnswerScaleID]...';


GO
ALTER TABLE [dbo].[ScreeningSectionQuestion]
    ADD CONSTRAINT [FK_ScreeningSectionQuestion__AnswerScaleID] FOREIGN KEY ([AnswerScaleID]) REFERENCES [dbo].[AnswerScale] ([AnswerScaleID]);


GO
PRINT N'Creating [dbo].[FK_ScreeningSectionQuestionResult__ScreeningSectionResult]...';


GO
ALTER TABLE [dbo].[ScreeningSectionQuestionResult]
    ADD CONSTRAINT [FK_ScreeningSectionQuestionResult__ScreeningSectionResult] FOREIGN KEY ([ScreeningResultID], [ScreeningSectionID]) REFERENCES [dbo].[ScreeningSectionResult] ([ScreeningResultID], [ScreeningSectionID]);


GO
PRINT N'Creating [dbo].[FK_ScreeningSectionQuestionResult__ScreeningSectionQuestion]...';


GO
ALTER TABLE [dbo].[ScreeningSectionQuestionResult]
    ADD CONSTRAINT [FK_ScreeningSectionQuestionResult__ScreeningSectionQuestion] FOREIGN KEY ([ScreeningSectionID], [QuestionID]) REFERENCES [dbo].[ScreeningSectionQuestion] ([ScreeningSectionID], [QuestionID]);


GO
PRINT N'Creating [dbo].[FK_ScreeningSectionResult__ScreeningSection]...';


GO
ALTER TABLE [dbo].[ScreeningSectionResult]
    ADD CONSTRAINT [FK_ScreeningSectionResult__ScreeningSection] FOREIGN KEY ([ScreeningSectionID]) REFERENCES [dbo].[ScreeningSection] ([ScreeningSectionID]);


GO
PRINT N'Creating [dbo].[FK_ScreeningSectionResult__ScreeningScoreLevel]...';


GO
ALTER TABLE [dbo].[ScreeningSectionResult]
    ADD CONSTRAINT [FK_ScreeningSectionResult__ScreeningScoreLevel] FOREIGN KEY ([ScreeningSectionID], [ScoreLevel]) REFERENCES [dbo].[ScreeningScoreLevel] ([ScreeningSectionID], [ScoreLevel]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ScreeningTimeLog__ScreeningSection]...';


GO
ALTER TABLE [dbo].[ScreeningTimeLog]
    ADD CONSTRAINT [FK_ScreeningTimeLog__ScreeningSection] FOREIGN KEY ([ScreeningSectionID]) REFERENCES [dbo].[ScreeningSection] ([ScreeningSectionID]);


GO
PRINT N'Creating [dbo].[FK_SecurityEvent_SecurityEventCategory]...';


GO
ALTER TABLE [dbo].[SecurityEvent]
    ADD CONSTRAINT [FK_SecurityEvent_SecurityEventCategory] FOREIGN KEY ([SecurityEventCategoryID]) REFERENCES [dbo].[SecurityEventCategory] ([SecurityEventCategoryID]);


GO
PRINT N'Creating [dbo].[FK_SecurityLog_BranchLocationID]...';


GO
ALTER TABLE [dbo].[SecurityLog]
    ADD CONSTRAINT [FK_SecurityLog_BranchLocationID] FOREIGN KEY ([RelatedBranchID]) REFERENCES [dbo].[BranchLocation] ([BranchLocationID]) ON DELETE SET NULL ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_SecurityLog_SecurityLogAction]...';


GO
ALTER TABLE [dbo].[SecurityLog]
    ADD CONSTRAINT [FK_SecurityLog_SecurityLogAction] FOREIGN KEY ([SecurityEventID]) REFERENCES [dbo].[SecurityEvent] ([SecurityEventID]);


GO
PRINT N'Creating [dbo].[FK_SecurityLog_Users]...';


GO
ALTER TABLE [dbo].[SecurityLog]
    ADD CONSTRAINT [FK_SecurityLog_Users] FOREIGN KEY ([PKID]) REFERENCES [dbo].[Users] ([PKID]);


GO
PRINT N'Creating [dbo].[FK_UserPasswordHistory_Users]...';


GO
ALTER TABLE [dbo].[UserPasswordHistory]
    ADD CONSTRAINT [FK_UserPasswordHistory_Users] FOREIGN KEY ([PKID]) REFERENCES [dbo].[Users] ([PKID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_UsersBranchLocation_UserID]...';


GO
ALTER TABLE [dbo].[Users_BranchLocation]
    ADD CONSTRAINT [FK_UsersBranchLocation_UserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([PKID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_UsersBranchLocation_BranchLocationID]...';


GO
ALTER TABLE [dbo].[Users_BranchLocation]
    ADD CONSTRAINT [FK_UsersBranchLocation_BranchLocationID] FOREIGN KEY ([BranchLocationID]) REFERENCES [dbo].[BranchLocation] ([BranchLocationID]);


GO
PRINT N'Creating [dbo].[FK_UsersInRoles_Roles]...';


GO
ALTER TABLE [dbo].[UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_Roles] FOREIGN KEY ([Rolename]) REFERENCES [dbo].[Roles] ([Rolename]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_UsersInRoles_Users]...';


GO
ALTER TABLE [dbo].[UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_Users] FOREIGN KEY ([Username]) REFERENCES [dbo].[Users] ([Username]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[vKiosk]...';


GO
CREATE VIEW [dbo].[vKiosk]
    AS
SELECT 
    k.KioskID, 
    k.KioskName, 
    k.Description, 
    k.CreatedDate , 
    k.LastActivityDate, 
    k.BranchLocationID, 
    k.Disabled, 
    l.Name as BranchLocationName,
    k.IpAddress,
    k.KioskAppVersion,
    p.ID as ScreeningProfileID,
    p.Name as ScreeningProfileName,
    k.SecretKey
FROM dbo.Kiosk k
INNER JOIN dbo.BranchLocation l ON k.BranchLocationID = l.BranchLocationID
INNER JOIN dbo.ScreeningProfile p ON p.ID = l.ScreeningProfileID
GO
PRINT N'Creating [dbo].[fn_GetAge]...';


GO
CREATE FUNCTION [dbo].[fn_GetAge]
(
    @Birthday date
)
RETURNS int AS 
BEGIN

DECLARE @CurrentDate DATETIME = GETDATE();


 RETURN CASE WHEN dateadd(year, datediff (year, @Birthday, @CurrentDate), @Birthday) > @CurrentDate
        THEN datediff(year, @Birthday, @CurrentDate) - 1
        ELSE datediff(year, @Birthday, @CurrentDate)
    END
END
GO
PRINT N'Creating [dbo].[fn_GetFullName]...';


GO
CREATE FUNCTION [dbo].[fn_GetFullName]
(
    @LastName nvarchar(255), 
    @FirstName nvarchar(255), 
    @MiddleName nvarchar(255)
)
RETURNS nvarchar(max)
WITH SCHEMABINDING
AS
BEGIN
    DECLARE @Result nvarchar(max);
    SET @Result = ISNULL(@FirstName, '');

    IF LEN(ISNULL(@MiddleName, '')) > 0
    BEGIN
        IF LEN(@Result) > 0
            SET @Result = @Result + ' ';

        SET @Result = @Result + @MiddleName;
    END

    IF LEN(ISNULL(@LastName, '')) > 0
    BEGIN
        IF LEN(@Result) > 0
            SET @Result = @Result + ' ';

        SET @Result = @Result + @LastName;
    END

    RETURN @Result;
END
GO
PRINT N'Creating [dbo].[fn_GetPatientName]...';


GO
CREATE FUNCTION [dbo].[fn_GetPatientName](
    @LastName nvarchar(255), 
    @FirstName nvarchar(255), 
    @MiddleName nvarchar(255)
)
RETURNS nvarchar(max)
WITH SCHEMABINDING
AS
BEGIN

DECLARE @comma bit = 0; -- where comma was added
DECLARE @Result nvarchar(max);
SET @Result = ISNULL(@LastName, '');

IF LEN(ISNULL(@FirstName, '')) > 0
BEGIN
    IF LEN(@Result) > 0
    BEGIN
        SET @Result = @Result + ', ';
        SET @comma = 1;
        
        SET @Result = @Result + @FirstName;
    END
    
END	

IF LEN(ISNULL(@MiddleName, '')) > 0
BEGIN
    IF LEN(@Result) > 0
    BEGIN
        IF @comma = 1
            SET @Result = @Result + ' ';
        ELSE 
        SET @Result = @Result + ', ';
        
        SET @Result = @Result + @MiddleName;
    END

    
END

RETURN @Result;
END
GO
PRINT N'Creating [dbo].[ufnMapPatientName]...';


GO
CREATE FUNCTION [dbo].[ufnMapPatientName]
(
    @Source nvarchar(128)
)
RETURNS nvarchar(128)
AS
BEGIN
    DECLARE @Dest nvarchar(128)
    
    SELECT @Dest = Destination FROM export.PatientNameMap WHERE Source = @Source;

    
    RETURN ISNULL(@Dest, UPPER(@Source))
END
GO
PRINT N'Creating [dbo].[BhsDemographics]...';


GO
CREATE TABLE [dbo].[BhsDemographics] (
    [ID]                    BIGINT             IDENTITY (1, 1) NOT NULL,
    [ScreeningResultID]     BIGINT             NULL,
    [LocationID]            INT                NOT NULL,
    [CreatedDate]           DATETIMEOFFSET (7) NOT NULL,
    [ScreeningDate]         DATETIMEOFFSET (7) NOT NULL,
    [BhsStaffNameCompleted] NVARCHAR (128)     NULL,
    [CompleteDate]          DATETIMEOFFSET (7) NULL,
    [FirstName]             NVARCHAR (128)     NOT NULL,
    [LastName]              NVARCHAR (128)     NOT NULL,
    [MiddleName]            NVARCHAR (128)     NULL,
    [Birthday]              DATE               NOT NULL,
    [StreetAddress]         NVARCHAR (512)     NULL,
    [City]                  NVARCHAR (255)     NULL,
    [StateID]               CHAR (2)           NULL,
    [ZipCode]               CHAR (5)           NULL,
    [Phone]                 CHAR (14)          NULL,
    [RaceID]                INT                NULL,
    [GenderID]              INT                NULL,
    [SexualOrientationID]   INT                NULL,
    [TribalAffiliation]     NVARCHAR (128)     NULL,
    [MaritalStatusID]       INT                NULL,
    [EducationLevelID]      INT                NULL,
    [LivingOnReservationID] INT                NULL,
    [CountyOfResidence]     NVARCHAR (128)     NULL,
    [MilitaryExperienceID]  VARCHAR (32)       NULL,
    [ExportedToHRN]         NVARCHAR (255)     NULL,
    [PatientName]           AS                 dbo.fn_GetPatientName(LastName, FirstName, MiddleName) PERSISTED,
    CONSTRAINT [PK_BhsDemographics] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[BhsDemographics].[IX__BhsDemographics_Birthday]...';


GO
CREATE NONCLUSTERED INDEX [IX__BhsDemographics_Birthday]
    ON [dbo].[BhsDemographics]([Birthday] ASC)
    INCLUDE([PatientName], [CreatedDate], [ScreeningDate], [CompleteDate]);


GO
PRINT N'Creating [dbo].[ScreeningResult]...';


GO
CREATE TABLE [dbo].[ScreeningResult] (
    [ScreeningResultID]       BIGINT             IDENTITY (1, 1) NOT NULL,
    [ScreeningID]             CHAR (4)           NOT NULL,
    [FirstName]               NVARCHAR (128)     NOT NULL,
    [LastName]                NVARCHAR (128)     NOT NULL,
    [MiddleName]              NVARCHAR (128)     NULL,
    [Birthday]                DATE               NOT NULL,
    [StreetAddress]           NVARCHAR (512)     NULL,
    [City]                    NVARCHAR (255)     NULL,
    [StateID]                 CHAR (2)           NULL,
    [ZipCode]                 CHAR (5)           NULL,
    [Phone]                   CHAR (14)          NULL,
    [KioskID]                 SMALLINT           NOT NULL,
    [CreatedDate]             DATETIMEOFFSET (7) NOT NULL,
    [IsDeleted]               BIT                NOT NULL,
    [DeletedDate]             DATETIMEOFFSET (7) NULL,
    [DeletedBy]               INT                NULL,
    [WithErrors]              BIT                NOT NULL,
    [ExportDate]              DATETIMEOFFSET (7) NULL,
    [ExportedBy]              INT                NULL,
    [ExportedToPatientID]     INT                NULL,
    [ExportedToHRN]           NVARCHAR (255)     NULL,
    [ExportedToVisitID]       INT                NULL,
    [ExportedToVisitDate]     DATETIME           NULL,
    [ExportedToVisitLocation] NVARCHAR (255)     NULL,
    [PatientName]             AS                 dbo.fn_GetPatientName(LastName, FirstName, MiddleName) PERSISTED,
    CONSTRAINT [PK_ScreeningResult] PRIMARY KEY CLUSTERED ([ScreeningResultID] ASC)
);


GO
PRINT N'Creating [dbo].[ScreeningResult].[IX_ScreeningResult_CreatedDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_ScreeningResult_CreatedDate]
    ON [dbo].[ScreeningResult]([CreatedDate] DESC)
    INCLUDE([FirstName], [LastName], [MiddleName], [Birthday], [ScreeningID]) WHERE IsDeleted = 0;


GO
PRINT N'Creating [dbo].[ScreeningResult].[IX_ScreeningResult_IsDeleted]...';


GO
CREATE NONCLUSTERED INDEX [IX_ScreeningResult_IsDeleted]
    ON [dbo].[ScreeningResult]([IsDeleted] ASC)
    INCLUDE([FirstName], [LastName], [MiddleName], [Birthday], [CreatedDate], [ScreeningID], [KioskID]) WHERE IsDeleted = 0;


GO
PRINT N'Creating [dbo].[UserDetails]...';


GO
CREATE TABLE [dbo].[UserDetails] (
    [UserID]       INT            NOT NULL,
    [FirstName]    NVARCHAR (128) NOT NULL,
    [LastName]     NVARCHAR (128) NOT NULL,
    [MiddleName]   NVARCHAR (128) NULL,
    [ContactPhone] NVARCHAR (24)  NULL,
    [StateCode]    CHAR (2)       NULL,
    [City]         NVARCHAR (128) NULL,
    [AddressLine1] NVARCHAR (128) NULL,
    [AddressLine2] NVARCHAR (128) NULL,
    [PostalCode]   NVARCHAR (24)  NULL,
    [IsBlock]      BIT            NOT NULL,
    [FullName]     AS             CONVERT (NVARCHAR (255), dbo.fn_GetFullName(LastName, FirstName, MiddleName)),
    CONSTRAINT [PK_UserDetails] PRIMARY KEY CLUSTERED ([UserID] ASC)
);


GO
PRINT N'Creating [dbo].[UserDetails].[IX_UserDetails_FullName]...';


GO
CREATE NONCLUSTERED INDEX [IX_UserDetails_FullName]
    ON [dbo].[UserDetails]([FullName] ASC);


GO
PRINT N'Creating [export].[FK_ExportedScreeningResult__ScreeningResult]...';


GO
ALTER TABLE [export].[SmartExportLog]
    ADD CONSTRAINT [FK_ExportedScreeningResult__ScreeningResult] FOREIGN KEY ([ScreeningResultID]) REFERENCES [dbo].[ScreeningResult] ([ScreeningResultID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_BhsDemographics__ScreeningResult]...';


GO
ALTER TABLE [dbo].[BhsDemographics]
    ADD CONSTRAINT [FK_BhsDemographics__ScreeningResult] FOREIGN KEY ([ScreeningResultID]) REFERENCES [dbo].[ScreeningResult] ([ScreeningResultID]);


GO
PRINT N'Creating [dbo].[FK_BhsDemographics__BranchLocation]...';


GO
ALTER TABLE [dbo].[BhsDemographics]
    ADD CONSTRAINT [FK_BhsDemographics__BranchLocation] FOREIGN KEY ([LocationID]) REFERENCES [dbo].[BranchLocation] ([BranchLocationID]);


GO
PRINT N'Creating [dbo].[FK_BhsDemographics__Race]...';


GO
ALTER TABLE [dbo].[BhsDemographics]
    ADD CONSTRAINT [FK_BhsDemographics__Race] FOREIGN KEY ([RaceID]) REFERENCES [dbo].[Race] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsDemographics__Gender]...';


GO
ALTER TABLE [dbo].[BhsDemographics]
    ADD CONSTRAINT [FK_BhsDemographics__Gender] FOREIGN KEY ([GenderID]) REFERENCES [dbo].[Gender] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsDemographics__SexualOrientation]...';


GO
ALTER TABLE [dbo].[BhsDemographics]
    ADD CONSTRAINT [FK_BhsDemographics__SexualOrientation] FOREIGN KEY ([SexualOrientationID]) REFERENCES [dbo].[SexualOrientation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsDemographics__MaritalStatus]...';


GO
ALTER TABLE [dbo].[BhsDemographics]
    ADD CONSTRAINT [FK_BhsDemographics__MaritalStatus] FOREIGN KEY ([MaritalStatusID]) REFERENCES [dbo].[MaritalStatus] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsDemographics__EducationLevel]...';


GO
ALTER TABLE [dbo].[BhsDemographics]
    ADD CONSTRAINT [FK_BhsDemographics__EducationLevel] FOREIGN KEY ([EducationLevelID]) REFERENCES [dbo].[EducationLevel] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsDemographics__LivingOnReservation]...';


GO
ALTER TABLE [dbo].[BhsDemographics]
    ADD CONSTRAINT [FK_BhsDemographics__LivingOnReservation] FOREIGN KEY ([LivingOnReservationID]) REFERENCES [dbo].[LivingOnReservation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BhsFollowUp__ScreeningResult]...';


GO
ALTER TABLE [dbo].[BhsFollowUp]
    ADD CONSTRAINT [FK_BhsFollowUp__ScreeningResult] FOREIGN KEY ([ScreeningResultID]) REFERENCES [dbo].[ScreeningResult] ([ScreeningResultID]);


GO
PRINT N'Creating [dbo].[FK_BhsVisit__ScreeningResult]...';


GO
ALTER TABLE [dbo].[BhsVisit]
    ADD CONSTRAINT [FK_BhsVisit__ScreeningResult] FOREIGN KEY ([ScreeningResultID]) REFERENCES [dbo].[ScreeningResult] ([ScreeningResultID]);


GO
PRINT N'Creating [dbo].[FK_ScreeningResult__Screening]...';


GO
ALTER TABLE [dbo].[ScreeningResult]
    ADD CONSTRAINT [FK_ScreeningResult__Screening] FOREIGN KEY ([ScreeningID]) REFERENCES [dbo].[Screening] ([ScreeningID]);


GO
PRINT N'Creating [dbo].[FK_ScreeningResult__State]...';


GO
ALTER TABLE [dbo].[ScreeningResult]
    ADD CONSTRAINT [FK_ScreeningResult__State] FOREIGN KEY ([StateID]) REFERENCES [dbo].[State] ([StateCode]);


GO
PRINT N'Creating [dbo].[FK_ScreeningResult__Users]...';


GO
ALTER TABLE [dbo].[ScreeningResult]
    ADD CONSTRAINT [FK_ScreeningResult__Users] FOREIGN KEY ([DeletedBy]) REFERENCES [dbo].[Users] ([PKID]) ON DELETE SET NULL ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ScreeningResult__Kiosk]...';


GO
ALTER TABLE [dbo].[ScreeningResult]
    ADD CONSTRAINT [FK_ScreeningResult__Kiosk] FOREIGN KEY ([KioskID]) REFERENCES [dbo].[Kiosk] ([KioskID]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ScreeningSectionResult__ScreeningResult]...';


GO
ALTER TABLE [dbo].[ScreeningSectionResult]
    ADD CONSTRAINT [FK_ScreeningSectionResult__ScreeningResult] FOREIGN KEY ([ScreeningResultID]) REFERENCES [dbo].[ScreeningResult] ([ScreeningResultID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ScreeningTimeLog__ScreeningResult]...';


GO
ALTER TABLE [dbo].[ScreeningTimeLog]
    ADD CONSTRAINT [FK_ScreeningTimeLog__ScreeningResult] FOREIGN KEY ([ScreeningResultID]) REFERENCES [dbo].[ScreeningResult] ([ScreeningResultID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_UserDetails_Users]...';


GO
ALTER TABLE [dbo].[UserDetails]
    ADD CONSTRAINT [FK_UserDetails_Users] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([PKID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[DF_ScreeningResult_IsDeleted]...';


GO
ALTER TABLE [dbo].[ScreeningResult]
    ADD CONSTRAINT [DF_ScreeningResult_IsDeleted] DEFAULT (0) FOR [IsDeleted];


GO
PRINT N'Creating [dbo].[DF_ScreeningResult_WithErrors]...';


GO
ALTER TABLE [dbo].[ScreeningResult]
    ADD CONSTRAINT [DF_ScreeningResult_WithErrors] DEFAULT (0) FOR [WithErrors];


GO
PRINT N'Creating [dbo].[DF_UserDetails_IsBlock]...';


GO
ALTER TABLE [dbo].[UserDetails]
    ADD CONSTRAINT [DF_UserDetails_IsBlock] DEFAULT (0) FOR [IsBlock];


GO
PRINT N'Creating [dbo].[vBhsVisitForExport]...';


GO
CREATE VIEW [dbo].[vBhsVisitForExport]
AS SELECT 
r.PatientName as FullName
,r.LastName
,r.FirstName
,r.MiddleName
,r.Birthday
,r.ExportedToHRN
,pd.ID as DemographicsID
,v.ScreeningResultID
,v.ScreeningDate
,v.ID
,v.CreatedDate
,v.CompleteDate
,v.[BhsStaffNameCompleted]
,v.LocationID
,l.Name as BranchLocationName
,v.[NewVisitReferralRecommendationID]
,refRec.[Name] as NewVisitReferralRecommendationName
,v.[NewVisitReferralRecommendationDescription]
,v.[NewVisitReferralRecommendationAcceptedID]
,accept.[Name] as NewVisitReferralRecommendationAcceptedName
,v.[ReasonNewVisitReferralRecommendationNotAcceptedID]
,notaccept.Name as ReasonNewVisitReferralRecommendationNotAcceptedName
,v.[NewVisitDate]
,v.[DischargedID]
,discharge.Name as DischargedName
,v.[ThirtyDatyFollowUpFlag]
,v.[FollowUpDate]
,v.[Notes]

,v.[TreatmentAction1ID]
,ta1.Name as TreatmentAction1Name
,v.[TreatmentAction1Description]
,v.[TreatmentAction2ID]
,ta2.Name as TreatmentAction2Name
,v.[TreatmentAction2Description]
,v.[TreatmentAction3ID]
,ta3.Name as TreatmentAction3Name
,v.[TreatmentAction3Description]
,v.[TreatmentAction4ID]
,ta4.Name as TreatmentAction4Name
,v.[TreatmentAction4Description]
,v.[TreatmentAction5ID]
,ta5.Name as TreatmentAction5Name
,v.[TreatmentAction5Description]
,v.[OtherScreeningTools]

,v.[TobacoExposureSmokerInHomeFlag]
,v.[TobacoExposureCeremonyUseFlag]
,v.[TobacoExposureSmokingFlag]
,v.[TobacoExposureSmoklessFlag]
,v.[AlcoholUseFlagScoreLevel]
,v.[AlcoholUseFlagScoreLevelLabel]
,v.[SubstanceAbuseFlagScoreLevel]
,v.[SubstanceAbuseFlagScoreLevelLabel]
,v.[DepressionFlagScoreLevel]
,v.[DepressionFlagScoreLevelLabel]
,v.[DepressionThinkOfDeathAnswer]
,v.[PartnerViolenceFlagScoreLevel]
,v.[PartnerViolenceFlagScoreLevelLabel]


FROM 
    dbo.BhsVisit v 
    INNER JOIN dbo.ScreeningResult r ON v.ScreeningResultID = r.ScreeningResultID
    INNER JOIN dbo.BranchLocation l ON v.LocationID = l.BranchLocationID
    LEFT JOIN dbo.BhsDemographics pd ON pd.Birthday = r.Birthday AND pd.PatientName = r.PatientName
    LEFT JOIN dbo.NewVisitReferralRecommendation refRec ON v.NewVisitReferralRecommendationID = refRec.ID
    LEFT JOIN dbo.NewVisitReferralRecommendationAccepted accept ON v.[NewVisitReferralRecommendationAcceptedID] = accept.ID
    LEFT JOIN dbo.ReasonNewVisitReferralRecommendationNotAccepted notaccept ON v.ReasonNewVisitReferralRecommendationNotAcceptedID = notaccept.ID
    LEFT JOIN dbo.Discharged discharge ON v.[DischargedID] = discharge.ID
    LEFT JOIN dbo.TreatmentAction ta1 ON ta1.ID = v.[TreatmentAction1ID]
    LEFT JOIN dbo.TreatmentAction ta2 ON ta2.ID = v.[TreatmentAction2ID]
    LEFT JOIN dbo.TreatmentAction ta3 ON ta3.ID = v.[TreatmentAction3ID]
    LEFT JOIN dbo.TreatmentAction ta4 ON ta4.ID = v.[TreatmentAction4ID]
    LEFT JOIN dbo.TreatmentAction ta5 ON ta5.ID = v.[TreatmentAction5ID]

WHERE r.IsDeleted = 0 and r.IsDeleted = 0 
;
GO
PRINT N'Creating [dbo].[vBhsVisitsAndDemographics]...';


GO
CREATE VIEW [dbo].[vBhsVisitsAndDemographics] AS
WITH tblResult(ID, ScreeningResultID, CreatedDate,ScreeningDate, CompleteDate, HasAddress, IsVisitRecordType, LocationID, Birthday, FullName) AS
(
SELECT
v.ID
,v.ScreeningResultID
,v.CreatedDate
,v.ScreeningDate
,v.CompleteDate
,CASE WHEN r.StreetAddress IS NOT NULL THEN 1 ELSE 0 END AS HasAddress
,1 as IsVisitRecordType
,v.LocationID
,r.Birthday
,dbo.fn_GetPatientName(r.LastName, r.FirstName, r.MiddleName) as FullName

FROM 
    dbo.BhsVisit v 
    INNER JOIN dbo.ScreeningResult r ON v.ScreeningResultID = r.ScreeningResultID
WHERE r.IsDeleted = 0 and r.IsDeleted = 0 
UNION
SELECT
v.ID
,v.ScreeningResultID
,v.CreatedDate
,v.ScreeningDate
,v.CompleteDate
,CASE WHEN v.StreetAddress IS NOT NULL THEN 1 ELSE 0 END AS HasAddress
,0 as IsVisitRecordType
,v.LocationID
,v.Birthday
,dbo.fn_GetPatientName(v.LastName, v.FirstName, v.MiddleName) as FullName
FROM 
    dbo.BhsDemographics v 
)
SELECT t.* 
FROM tblResult t
GO
PRINT N'Creating [dbo].[vBhsVisitsWithDemographics]...';


GO

CREATE VIEW [dbo].[vBhsVisitsWithDemographics] AS
SELECT
v.ID
,v.ScreeningResultID
,v.CreatedDate
,v.ScreeningDate
,v.CompleteDate
,CASE WHEN r.StreetAddress IS NOT NULL THEN 1 ELSE 0 END AS HasAddress
,1 as IsVisitRecordType
,v.LocationID
,l.Name as LocationName
,r.Birthday
,r.PatientName as FullName
,pd.ID as DemographicsID
,pd.ScreeningDate as DemographicsScreeningDate
,pd.CreatedDate as DemographicsCreateDate
,pd.CompleteDate as  DemographicsCompleteDate
FROM 
    dbo.BhsVisit v 
    INNER JOIN dbo.ScreeningResult r ON v.ScreeningResultID = r.ScreeningResultID
    INNER JOIN dbo.BranchLocation l ON l.BranchLocationID = v.LocationID
    LEFT JOIN dbo.BhsDemographics pd ON pd.Birthday = r.Birthday AND pd.PatientName = r.PatientName

WHERE r.IsDeleted = 0 and r.IsDeleted = 0 
UNION ALL
SELECT
NULL AS ID
,pd.ScreeningResultID
,r.CreatedDate
,pd.ScreeningDate as ScreeningDate
,pd.CompleteDate
,0 As HasAddress
,0 as IsVisitRecordType
,pd.LocationID
,l.Name as LocationName
,r.Birthday
,r.PatientName as FullName
,pd.ID as DemographicsID
,pd.ScreeningDate as DemographicsScreeningDate
,pd.CreatedDate as DemographicsCreateDate
,pd.CompleteDate as  DemographicsCompleteDate
FROM 
    dbo.BhsDemographics pd
    INNER JOIN dbo.ScreeningResult r ON pd.ScreeningResultID = r.ScreeningResultID
    INNER JOIN dbo.BranchLocation l ON l.BranchLocationID = pd.LocationID
WHERE r.IsDeleted = 0 and r.IsDeleted = 0 AND
NOT EXISTS( 
SELECT 1 FROM dbo.BhsVisit v 
INNER JOIN dbo.ScreeningResult r2 ON v.ScreeningResultID = r2.ScreeningResultID 
WHERE r2.PatientName = pd.PatientName AND r2.Birthday = pd.Birthday)
GO
PRINT N'Creating [dbo].[vScreeningResults]...';


GO
CREATE VIEW dbo.[vScreeningResults] 
AS
SELECT 
r.ScreeningResultID, 
r.PatientName, 
r.FirstName,
r.LastName,
r.Birthday, 
r.KioskID,
k.BranchLocationID,
r.CreatedDate,
ssr.ScreeningSectionID, 
ssr.Score, 
ssr.ScoreLevel, 
ssr.AnswerValue as SectionAnswerValue, 
qr.QuestionID, 
qr.AnswerValue
FROM dbo.ScreeningResult r
    INNER JOIN dbo.Kiosk k ON r.KioskID = k.KioskID
    INNER JOIN dbo.ScreeningSectionResult ssr 
        ON r.ScreeningResultID = ssr.ScreeningResultID
    INNER JOIN dbo.ScreeningSectionQuestionResult qr 
        ON qr.ScreeningResultID = ssr.ScreeningResultID 
            AND qr.ScreeningSectionID = ssr.ScreeningSectionID
WHERE r.IsDeleted = 0
;
GO
PRINT N'Creating [dbo].[vScreeningResultsForExcelExport]...';


GO

CREATE VIEW [dbo].[vScreeningResultsForExcelExport]
AS
SELECT
r.ScreeningResultID as 'ScreeDox Record No.',
CONVERT(char(10),r.CreatedDate, 101) as 'ScreeningDate',
r.LastName,
r.FirstName,
ISNULL(r.MiddleName,'') as MiddleName,
CONVERT(char(10), r.Birthday, 101) as 'Birthday'
,l.BranchLocationID as 'LocationID'
,l.Name as 'Location'
-- tobacco
,q1.AnswerValue as 'Tobacco Use - Ceremony'
,q2.AnswerValue as 'Tobacco Use - Smoking'
,q3.AnswerValue as 'Tobacco Use - Smokeless'

,c1.AnswerValue as 'CAGE / Alcohol Use - Q1'
,c2.AnswerValue as 'CAGE / Alcohol Use - Q2'
,c3.AnswerValue as 'CAGE / Alcohol Use - Q3'
,c4.AnswerValue as 'CAGE / Alcohol Use - Q4'
,c0.Score as 'CAGE / Alcohol Use - Total'
,c0.ScoreLevel as 'CAGE / Alcohol Use - Score Level'

-- dast
,d1.AnswerValue as 'DAST-10 / Drug Use - Q1'
,d2.AnswerValue as 'DAST-10 / Drug Use - Q2'
,ABS(d3.AnswerValue - 1) as 'DAST-10 / Drug Use - Q3'
,d4.AnswerValue as 'DAST-10 / Drug Use - Q4'
,d5.AnswerValue as 'DAST-10 / Drug Use - Q5'
,d6.AnswerValue as 'DAST-10 / Drug Use - Q6'
,d7.AnswerValue as 'DAST-10 / Drug Use - Q7'
,d8.AnswerValue as 'DAST-10 / Drug Use - Q8'
,d9.AnswerValue as 'DAST-10 / Drug Use - Q9'
,d10.AnswerValue as 'DAST-10 / Drug Use - Q10'

,d0.Score as 'DAST-10 / Drug Use - Total'
,d0.ScoreLevel as 'DAST-10 / Drug Use - Score Level'

--phq
,p1.AnswerValue as 'PHQ-9 / Depression - Q1'
,p2.AnswerValue as 'PHQ-9 / Depression - Q2'
,p3.AnswerValue as 'PHQ-9 / Depression - Q3'
,p4.AnswerValue as 'PHQ-9 / Depression - Q4'
,p5.AnswerValue as 'PHQ-9 / Depression - Q5'
,p6.AnswerValue as 'PHQ-9 / Depression - Q6'
,p7.AnswerValue as 'PHQ-9 / Depression - Q7'
,p8.AnswerValue as 'PHQ-9 / Depression - Q8'
,p9.AnswerValue as 'PHQ-9 / Depression - Q9'
--,p10.AnswerValue as 'PHQ-9 / Depression - Q10'
,p10a.OptionText as 'PHQ-9 / Depression - Q10'


,p0.Score as 'PHQ-9 / Depression - Total'
,p0.ScoreLevel as 'PHQ-9 / Depression - Score Level'

--hits
,h1.AnswerValue as 'HITS / Violence - Q1'
,h2.AnswerValue as 'HITS / Violence - Q2'
,h3.AnswerValue as 'HITS / Violence - Q3'
,h4.AnswerValue as 'HITS / Violence - Q4'

,h0.Score as 'HITS / Violence - Total'
,h0.ScoreLevel as 'HITS / Violence - Score Level'
--
,doch1a.Name as 'Primary Drug'
,doch2a.Name as 'Secondary Drug'
,doch3a.Name as 'Tertiary Drug'
,ISNULL(demographics.ID,'') as 'DemographicsId'


FROM dbo.ScreeningResult r
    INNER JOIN dbo.Kiosk k ON r.KioskID = k.KioskID
    INNER JOIN dbo.BranchLocation l ON l.BranchLocationID = k.BranchLocationID
    LEFT JOIN dbo.ScreeningSectionQuestionResult q1 ON r.ScreeningResultID = q1.ScreeningResultID AND q1.ScreeningSectionID = 'TCC' AND q1.QuestionID = 1 
    LEFT JOIN dbo.ScreeningSectionQuestionResult q2 ON r.ScreeningResultID = q2.ScreeningResultID AND q2.ScreeningSectionID = 'TCC' AND q2.QuestionID = 2 
    LEFT JOIN dbo.ScreeningSectionQuestionResult q3 ON r.ScreeningResultID = q3.ScreeningResultID AND q3.ScreeningSectionID = 'TCC' AND q3.QuestionID = 3 
    --cage
    LEFT JOIN dbo.ScreeningSectionQuestionResult c1 ON r.ScreeningResultID = c1.ScreeningResultID AND c1.ScreeningSectionID = 'CAGE' AND c1.QuestionID = 1 
    LEFT JOIN dbo.ScreeningSectionQuestionResult c2 ON r.ScreeningResultID = c2.ScreeningResultID AND c2.ScreeningSectionID = 'CAGE' AND c2.QuestionID = 2 
    LEFT JOIN dbo.ScreeningSectionQuestionResult c3 ON r.ScreeningResultID = c3.ScreeningResultID AND c3.ScreeningSectionID = 'CAGE' AND c3.QuestionID = 3 
    LEFT JOIN dbo.ScreeningSectionQuestionResult c4 ON r.ScreeningResultID = c4.ScreeningResultID AND c4.ScreeningSectionID = 'CAGE' AND c4.QuestionID = 4 
    
    LEFT JOIN dbo.ScreeningSectionResult c0 ON r.ScreeningResultID = c0.ScreeningResultID AND c0.ScreeningSectionID = 'CAGE'
    
    -- dast

    LEFT JOIN dbo.ScreeningSectionQuestionResult d1 ON r.ScreeningResultID = d1.ScreeningResultID AND d1.ScreeningSectionID = 'DAST' AND d1.QuestionID = 10 
    LEFT JOIN dbo.ScreeningSectionQuestionResult d2 ON r.ScreeningResultID = d2.ScreeningResultID AND d2.ScreeningSectionID = 'DAST' AND d2.QuestionID = 1 
    LEFT JOIN dbo.ScreeningSectionQuestionResult d3 ON r.ScreeningResultID = d3.ScreeningResultID AND d3.ScreeningSectionID = 'DAST' AND d3.QuestionID = 2 
    LEFT JOIN dbo.ScreeningSectionQuestionResult d4 ON r.ScreeningResultID = d4.ScreeningResultID AND d4.ScreeningSectionID = 'DAST' AND d4.QuestionID = 3 
    LEFT JOIN dbo.ScreeningSectionQuestionResult d5 ON r.ScreeningResultID = d5.ScreeningResultID AND d5.ScreeningSectionID = 'DAST' AND d5.QuestionID = 4 	 
    LEFT JOIN dbo.ScreeningSectionQuestionResult d6 ON r.ScreeningResultID = d6.ScreeningResultID AND d6.ScreeningSectionID = 'DAST' AND d6.QuestionID = 5 	 
    LEFT JOIN dbo.ScreeningSectionQuestionResult d7 ON r.ScreeningResultID = d7.ScreeningResultID AND d7.ScreeningSectionID = 'DAST' AND d7.QuestionID = 6 	 
    LEFT JOIN dbo.ScreeningSectionQuestionResult d8 ON r.ScreeningResultID = d8.ScreeningResultID AND d8.ScreeningSectionID = 'DAST' AND d8.QuestionID = 7 	 
    LEFT JOIN dbo.ScreeningSectionQuestionResult d9 ON r.ScreeningResultID = d9.ScreeningResultID AND d9.ScreeningSectionID = 'DAST' AND d9.QuestionID = 8 	 
    LEFT JOIN dbo.ScreeningSectionQuestionResult d10 ON r.ScreeningResultID = d10.ScreeningResultID AND d10.ScreeningSectionID = 'DAST' AND d10.QuestionID = 9 	 
    
    LEFT JOIN dbo.ScreeningSectionResult d0 ON r.ScreeningResultID = d0.ScreeningResultID AND d0.ScreeningSectionID = 'DAST'

    --phq
    LEFT JOIN dbo.ScreeningSectionQuestionResult p1 ON r.ScreeningResultID = p1.ScreeningResultID AND p1.ScreeningSectionID = 'PHQ-9' AND p1.QuestionID = 1 
    LEFT JOIN dbo.ScreeningSectionQuestionResult p2 ON r.ScreeningResultID = p2.ScreeningResultID AND p2.ScreeningSectionID = 'PHQ-9' AND p2.QuestionID = 2 
    LEFT JOIN dbo.ScreeningSectionQuestionResult p3 ON r.ScreeningResultID = p3.ScreeningResultID AND p3.ScreeningSectionID = 'PHQ-9' AND p3.QuestionID = 3 
    LEFT JOIN dbo.ScreeningSectionQuestionResult p4 ON r.ScreeningResultID = p4.ScreeningResultID AND p4.ScreeningSectionID = 'PHQ-9' AND p4.QuestionID = 4 
    LEFT JOIN dbo.ScreeningSectionQuestionResult p5 ON r.ScreeningResultID = p5.ScreeningResultID AND p5.ScreeningSectionID = 'PHQ-9' AND p5.QuestionID = 5 
    LEFT JOIN dbo.ScreeningSectionQuestionResult p6 ON r.ScreeningResultID = p6.ScreeningResultID AND p6.ScreeningSectionID = 'PHQ-9' AND p6.QuestionID = 6 
    LEFT JOIN dbo.ScreeningSectionQuestionResult p7 ON r.ScreeningResultID = p7.ScreeningResultID AND p7.ScreeningSectionID = 'PHQ-9' AND p7.QuestionID = 7 
    LEFT JOIN dbo.ScreeningSectionQuestionResult p8 ON r.ScreeningResultID = p8.ScreeningResultID AND p8.ScreeningSectionID = 'PHQ-9' AND p8.QuestionID = 8 
    LEFT JOIN dbo.ScreeningSectionQuestionResult p9 ON r.ScreeningResultID = p9.ScreeningResultID AND p9.ScreeningSectionID = 'PHQ-9' AND p9.QuestionID = 9 
    LEFT JOIN dbo.ScreeningSectionQuestionResult p10 ON r.ScreeningResultID = p10.ScreeningResultID AND p10.ScreeningSectionID = 'PHQ-9' AND p10.QuestionID = 10
        LEFT JOIN dbo.ScreeningSectionQuestion p10q ON p10q.ScreeningSectionID = p10.ScreeningSectionID AND p10q.QuestionID = p10.QuestionID
        LEFT JOIN dbo.AnswerScaleOption p10a ON p10a.AnswerScaleID = p10q.AnswerScaleID AND p10a.OptionValue = p10.AnswerValue

    LEFT JOIN dbo.ScreeningSectionResult p0 ON r.ScreeningResultID = p0.ScreeningResultID AND p0.ScreeningSectionID = 'PHQ-9'
            
    --hits
    LEFT JOIN dbo.ScreeningSectionQuestionResult h1 ON r.ScreeningResultID = h1.ScreeningResultID AND h1.ScreeningSectionID = 'HITS' AND h1.QuestionID = 1
    LEFT JOIN dbo.ScreeningSectionQuestionResult h2 ON r.ScreeningResultID = h2.ScreeningResultID AND h2.ScreeningSectionID = 'HITS' AND h2.QuestionID = 2
    LEFT JOIN dbo.ScreeningSectionQuestionResult h3 ON r.ScreeningResultID = h3.ScreeningResultID AND h3.ScreeningSectionID = 'HITS' AND h3.QuestionID = 3
    LEFT JOIN dbo.ScreeningSectionQuestionResult h4 ON r.ScreeningResultID = h4.ScreeningResultID AND h4.ScreeningSectionID = 'HITS' AND h4.QuestionID = 4
    LEFT JOIN dbo.ScreeningSectionResult h0 ON r.ScreeningResultID = h0.ScreeningResultID AND h0.ScreeningSectionID = 'HITS'


        --doch
    LEFT JOIN dbo.ScreeningSectionQuestionResult doch1 ON r.ScreeningResultID = doch1.ScreeningResultID AND doch1.ScreeningSectionID = 'DOCH' AND doch1.QuestionID = 1
        LEFT JOIN dbo.DrugOfChoice doch1a ON doch1.AnswerValue = doch1a.ID
    LEFT JOIN dbo.ScreeningSectionQuestionResult doch2 ON r.ScreeningResultID = doch2.ScreeningResultID AND doch2.ScreeningSectionID = 'DOCH' AND doch2.QuestionID = 2
        LEFT JOIN dbo.DrugOfChoice doch2a ON ISNULL(doch2.AnswerValue,0) = doch2a.ID
    LEFT JOIN dbo.ScreeningSectionQuestionResult doch3 ON r.ScreeningResultID = doch3.ScreeningResultID AND doch3.ScreeningSectionID = 'DOCH' AND doch3.QuestionID = 3
        LEFT JOIN dbo.DrugOfChoice doch3a ON ISNULL(doch3.AnswerValue,0) = doch3a.ID
    LEFT JOIN (SELECT MAX(d.ID) as ID, d.PatientName, d.Birthday FROM dbo.BhsDemographics d GROUP BY d.PatientName, d.Birthday) demographics ON  demographics.PatientName = r.PatientName AND demographics.Birthday = r.Birthday
WHERE r.IsDeleted = 0
GO
PRINT N'Creating [dbo].[vScreeningTimeLogReport]...';


GO
CREATE VIEW [dbo].[vScreeningTimeLogReport]
AS 
SELECT
s.ScreeningSectionName,
s.ScreeningSectionID,
s.OrderIndex,
tlog.DurationInSeconds,
r.ScreeningResultID,
r.CreatedDate,
r.PatientName,
r.Birthday,
k.BranchLocationID
FROM dbo.ScreeningTimeLog tlog
    INNER JOIN dbo.ScreeningResult r ON tlog.ScreeningResultID = r.ScreeningResultID
    INNER JOIN dbo.Kiosk k ON k.KioskID = r.KioskID
    LEFT JOIN dbo.ScreeningSection s ON tlog.ScreeningSectionID = s.ScreeningSectionID    
;
GO
PRINT N'Creating [dbo].[fn_IntListToTable]...';


GO
CREATE FUNCTION [dbo].[fn_IntListToTable] (@InputString varchar(4000))
RETURNS  @OutputTable TABLE([value] BIGINT)
AS
BEGIN
    DECLARE @val VARCHAR(10),
    @Delimiter nvarchar(1) = ',';

    WHILE LEN(@InputString) > 0
    BEGIN
        SET @val = LEFT(@inputString, 
            ISNULL(NULLIF(CHARINDEX(@Delimiter, @InputString) - 1, -1),
            LEN(@InputString)))

        SET @InputString = SUBSTRING(@InputString,
                                     ISNULL(NULLIF(CHARINDEX(@Delimiter, @InputString), 0),
                                     LEN(@InputString)) + 1, LEN(@InputString))

        INSERT INTO @OutputTable([value]) VALUES (@val)
    END

    RETURN
END
GO
PRINT N'Creating [dbo].[fn_CheckMilitaryExperienceValues]...';


GO
CREATE FUNCTION [dbo].[fn_CheckMilitaryExperienceValues]
(
    @arrayString varchar(32)
)
RETURNS INT
AS
BEGIN
    declare @expectedCount int = 0,
    @actualCount int = 0;
    
    IF @arrayString IS NULL 
        RETURN 1;


    declare @IdValues table ([value] int);

    INSERT INTO @IdValues
    SELECT [value]
    FROM dbo.fn_IntListToTable(@arrayString);
    

    SET @expectedCount = (SELECT COUNT(*) FROM @IdValues);
    
    SET @actualCount = (
        SELECT COUNT(*)
        FROM @IdValues id INNER JOIN dbo.MilitaryExperience m ON id.value = m.ID
        );

    IF @actualCount = @expectedCount RETURN 1
    
    RETURN 0;
   
END
GO
PRINT N'Creating [dbo].[fn_GetMilitaryExperienceNames]...';


GO
CREATE FUNCTION [dbo].[fn_GetMilitaryExperienceNames]
(
    @idValues varchar(32)
)
RETURNS  varchar(4000)
AS
BEGIN
    DECLARE @str NVARCHAR(MAX)

    DECLARE @Delimiter CHAR(1) = ','

    SELECT @str = COALESCE(@str + @Delimiter,'') + Name 
    FROM dbo.MilitaryExperience WHERE ID IN (
        SELECT [value] FROM dbo.fn_IntListToTable(@IdValues)
    )

    RETURN RTRIM(LTRIM(@str))
END
GO
PRINT N'Creating [dbo].[CK_BhsDemographics__MilitaryExperience]...';


GO
ALTER TABLE [dbo].[BhsDemographics]
    ADD CONSTRAINT [CK_BhsDemographics__MilitaryExperience] CHECK ([dbo].[fn_CheckMilitaryExperienceValues](MilitaryExperienceID) = 1);


GO
PRINT N'Creating [dbo].[vBhsDemographics]...';


GO
CREATE VIEW [dbo].[vBhsDemographics]
AS 
SELECT 
d.[ID]
,d.[ScreeningResultID]
,d.[LocationID]
,location.Name as LocationName
,d.[CreatedDate]
,d.[ScreeningDate]
,d.[BhsStaffNameCompleted]
,d.[CompleteDate]
,d.PatientName as FullName
,d.[FirstName]
,d.[LastName]
,d.[MiddleName]
,d.[Birthday]
,d.[StreetAddress]
,d.[City]
,d.[StateID]
,state.Name as StateName
,d.[ZipCode]
,d.[Phone]
,d.[RaceID]
,r.[Name] as RaceName
,d.[GenderID]
,g.Name as GenderName
,d.[SexualOrientationID]
,s.Name as SexualOrientationName
,d.[TribalAffiliation]
,d.[MaritalStatusID]
,m.Name as [MaritalStatusName]
,d.[EducationLevelID]
,e.Name as EducationLevelName
,d.[LivingOnReservationID]
,l.Name as LivingOnReservationName
,d.[CountyOfResidence]
,d.[MilitaryExperienceID]
,dbo.fn_GetMilitaryExperienceNames(d.[MilitaryExperienceID]) as MilitaryExperienceName
,d.ExportedToHRN
FROM [dbo].[BhsDemographics] d
    INNER JOIN dbo.BranchLocation location ON d.LocationID = location.BranchLocationID
    LEFT JOIN dbo.State state ON d.StateID = state.StateCode 
    LEFT JOIN dbo.Race r ON d.RaceID = r.ID
    LEFT JOIN dbo.Gender g ON d.GenderID = g.ID
    LEFT JOIN dbo.SexualOrientation s ON d.SexualOrientationID = s.ID
    LEFT JOIN dbo.MaritalStatus m ON d.MaritalStatusID = m.ID
    LEFT JOIN dbo.EducationLevel e ON d.EducationLevelID = e.ID
    LEFT JOIN dbo.LivingOnReservation l ON d.LivingOnReservationID = l.ID
    LEFT JOIN dbo.MilitaryExperience military ON d.MilitaryExperienceID = military.ID
;
GO
PRINT N'Creating [export].[uspLogExportResult]...';


GO
CREATE PROCEDURE [export].[uspLogExportResult]
    @ScreeningResultID bigint,
    @Succeed int,
    @ExportDate DateTimeOffset,
    @FailedAttemptCount int,
    @FailedReason nvarchar(128),
    @LastError nvarchar(max),
    @Completed bit
AS
MERGE INTO [export].[SmartExportLog] as target
USING (
    SELECT @ScreeningResultID, @Succeed, @ExportDate, @FailedAttemptCount, @FailedReason, @LastError, @Completed) 
    as source(ScreeningResultID, Succeed, ExportDate, FailedAttemptCount, FailedReason, LastError, Completed)
    ON (target.ScreeningResultID = source.ScreeningResultID)  

WHEN MATCHED THEN UPDATE 
    SET target.Succeed = source.Succeed,
    target.ExportDate = source.ExportDate,
    target.FailedAttemptCount = ISNULL(source.FailedAttemptCount, target.FailedAttemptCount),
    target.FailedReason = ISNULL(source.FailedReason, target.FailedReason),
    target.LastError = ISNULL(source.LastError, target.LastError),
    target.Completed = source.Completed
WHEN NOT MATCHED BY TARGET THEN   
    INSERT ([ScreeningResultID]
           ,[Succeed]
           ,[ExportDate]
           ,[FailedAttemptCount]
           ,[FailedReason]
           ,[LastError]
           ,[Completed])
     VALUES
           (source.ScreeningResultID
           ,source.Succeed 
           ,source.ExportDate
           ,source.FailedAttemptCount
           ,source.FailedReason
           ,source.LastError
           ,source.Completed
           )
;

RETURN 0
GO
PRINT N'Creating [export].[uspAddPatientNameCorrectionLog]...';


GO
CREATE PROCEDURE [export].[uspAddPatientNameCorrectionLog]
    @OriginalPatientName nvarchar(400),
    @OriginalBirthday date,
    @CreatedDate datetimeoffset,
    @CorrectedPatientName nvarchar(400),
    @CorrectedBirthday date,
    @Comments nvarchar(max)
AS
INSERT INTO [export].[PatientNameCorrectionLog] (
    [OriginalPatientName],
    [OriginalBirthday],
    [CreatedDate],
    [CorrectedPatientName],
    [CorrectedBirthday],
    [Comments]
)
VALUES(
    @OriginalPatientName,
    @OriginalBirthday,
    @CreatedDate,
    @CorrectedPatientName,
    @CorrectedBirthday,
    @Comments
)
GO
PRINT N'Creating [dbo].[uspChangeKioskLastActivityDate]...';


GO
CREATE PROCEDURE [dbo].[uspChangeKioskLastActivityDate]
    @KioskID smallint,
    @IpAddress varchar(45),
    @KioskAppVersion varchar(16),
    @LastActivityDate datetimeoffset
AS
    UPDATE dbo.Kiosk SET 
    LastActivityDate = @LastActivityDate,
    IpAddress = ISNULL(@IpAddress, IpAddress),
    KioskAppVersion = ISNULL(@KioskAppVersion, KioskAppVersion)
WHERE KioskID = @KioskID

    RETURN (SELECT [Disabled] From dbo.Kiosk WHERE KioskID = @KioskID)
GO
PRINT N'Creating [dbo].[uspCreateNewScreeningProfile]...';


GO
CREATE PROCEDURE [dbo].[uspCreateNewScreeningProfile]
    @NewID int OUT,
    @Name nvarchar(128),
    @Description nvarchar(max) = NULL
AS
BEGIN
    declare @DefaultScreeningProfileId int = 1

    INSERT INTO dbo.ScreeningProfile (Name, Description)
    VALUES (@Name, @Description);

    SET @NewID = SCOPE_IDENTITY();

    -- copy screening settings

    -- copy age settings from the default profile

    INSERT INTO dbo.ScreeningProfileSectionAge (
        ScreeningProfileID,
        ScreeningSectionID,
        MinimalAge,
        IsEnabled,
        LastModifiedDateUTC,
        AgeIsNotConfigurable
    )
    SELECT 
        @NewID,
        ScreeningSectionID,
        MinimalAge,
        IsEnabled,
        SYSDATETIMEOFFSET(),
        AgeIsNotConfigurable
    FROM dbo.ScreeningProfileSectionAge
    WHERE ScreeningProfileID = @DefaultScreeningProfileId
       

    INSERT INTO dbo.ScreeningProfileFrequency(
        ScreeningProfileID,
        ScreeningSectionID,
        Frequency,
        LastModifiedDateUTC
    )
    SELECT 
        @NewID,
        ScreeningSectionID,
        Frequency,
        SYSDATETIMEOFFSET()
    FROM dbo.ScreeningProfileFrequency
    WHERE ScreeningProfileID = @DefaultScreeningProfileId

END
RETURN @NewID
GO
PRINT N'Creating [dbo].[uspFindMatchedPatientForExport]...';


GO
CREATE PROCEDURE [dbo].[uspFindMatchedPatientForExport]
    @LastName nvarchar(128),
    @FirstName nvarchar(128),
    @MiddleName nvarchar(128),
    @Birthday date
AS
BEGIN
    SELECT DISTINCT
        r.LastName,
        r.FirstName,
        r.MiddleName,
        r.Birthday,
        DIFFERENCE(ISNULL(r.MiddleName,''), dbo.ufnMapPatientName(@MiddleName)) AS MiddleNameDiff,
        r.ExportedToPatientID,
        r.ExportedToHRN
    FROM dbo.ScreeningResult r
        INNER JOIN export.SmartExportLog l ON r.ScreeningResultID = l.ScreeningResultID 
            AND l.Succeed = 1 and l.Completed = 1
    WHERE 
        l.ExportDate > '2020-10-01' /* ignore previous exports in DB where patient name might be wrong */
        AND r.Birthday = @Birthday
        AND DIFFERENCE(r.LastName, dbo.ufnMapPatientName(@LastName)) = 4
        AND DIFFERENCE(r.FirstName, dbo.ufnMapPatientName(@FirstName)) = 4
    ORDER BY DIFFERENCE(ISNULL(r.MiddleName,''), dbo.ufnMapPatientName(@MiddleName)) DESC
END
GO
PRINT N'Creating [dbo].[uspGetAllBranchLocations]...';


GO
CREATE PROCEDURE [dbo].[uspGetAllBranchLocations]
    @HideDisabled bit = 0
AS
    SELECT
        l.BranchLocationID,
        l.Name,
        l.Description,
        l.Disabled,
        p.ID as ScreeningProfileID,
        p.Name as ScreeningProfileName
    FROM dbo.BranchLocation l
        INNER JOIN dbo.ScreeningProfile p ON l.ScreeningProfileID = p.ID
    WHERE @HideDisabled = 0 OR l.Disabled = 0
    ORDER BY l.Name ASC
RETURN 0
GO
PRINT N'Creating [dbo].[uspGetBranchLocation]...';


GO
CREATE PROCEDURE [dbo].[uspGetBranchLocation]
    @BranchLocationID int
AS
    SELECT
        l.BranchLocationID,
        l.Name,
        l.Description,
        l.Disabled,
        p.ID as ScreeningProfileID,
        p.Name as ScreeningProfileName
    FROM dbo.BranchLocation l
        INNER JOIN dbo.ScreeningProfile p ON l.ScreeningProfileID = p.ID
    WHERE BranchLocationID = @BranchLocationID
RETURN 0
GO
PRINT N'Creating [dbo].[uspGetHistoryOfPreviousNotEmptyScreenings]...';


GO
CREATE PROCEDURE [dbo].[uspGetHistoryOfPreviousNotEmptyScreenings]
    @LastName varchar(128),
    @FirstName varchar(128),
    @MiddleName varchar(128),
    @Birthday date,
    @EndDate datetimeoffset,
    @Limit int
AS
SELECT TOP (@Limit)
sr.ScreeningResultID
,sr.CreatedDate
,CASE WHEN SUM(ISNULL(ssr.ScoreLevel,0)) > 0 THEN 1 ELSE 0 END AS Positive
,CASE WHEN COUNT(ssr.ScoreLevel) > 0 THEN 1 ELSE 0 END AS HasAnyScreening
FROM dbo.ScreeningResult sr
    LEFT JOIN dbo.ScreeningSectionResult ssr ON sr.ScreeningResultID = ssr.ScreeningResultID
WHERE 
sr.IsDeleted = 0 AND sr.CreatedDate < @EndDate AND
dbo.fn_GetPatientName(@LastName, @FirstName, @MiddleName) = dbo.fn_GetPatientName(sr.LastName, sr.FirstName, sr.MiddleName) AND @Birthday = sr.Birthday
GROUP BY sr.ScreeningResultID, sr.CreatedDate, sr.ExportDate, sr.ExportedToHRN
HAVING (CASE WHEN COUNT(ssr.ScoreLevel) > 0 THEN 1 ELSE 0 END) > 0
ORDER BY sr.CreatedDate DESC;

RETURN 0
GO
PRINT N'Creating [dbo].[uspGetHistoryOfVisitsAndFollowUps]...';


GO

CREATE PROCEDURE [dbo].[uspGetHistoryOfVisitsAndFollowUps]
    @LastName varchar(128),
    @FirstName varchar(128),
    @MiddleName varchar(128),
    @Birthday date,
    @StartDate datetimeoffset,
    @EndDate datetimeoffset
AS
SELECT 
v.ID
,v.CompleteDate
,v.DischargedID
,v.NewVisitReferralRecommendationAcceptedID
,'Visit' as ItemType
FROM dbo.BhsVisit v
    INNER JOIN dbo.ScreeningResult sr ON sr.ScreeningResultID = v.ScreeningResultID
WHERE 
sr.IsDeleted = 0 AND v.CompleteDate > @StartDate  AND v.CompleteDate < @EndDate AND
dbo.fn_GetPatientName(@LastName, @FirstName, @MiddleName) = dbo.fn_GetPatientName(sr.LastName, sr.FirstName, sr.MiddleName) AND @Birthday = sr.Birthday
UNION ALL
SELECT 
f.ID
,f.CompleteDate
,f.DischargedID
,f.NewVisitReferralRecommendationAcceptedID
,'Follow-Up' as ItemType
FROM dbo.BhsFollowUp f
    INNER JOIN dbo.ScreeningResult sr ON sr.ScreeningResultID = f.ScreeningResultID
WHERE 
sr.IsDeleted = 0 AND f.CompleteDate > @StartDate AND f.CompleteDate < @EndDate AND
dbo.fn_GetPatientName(@LastName, @FirstName, @MiddleName) = dbo.fn_GetPatientName(sr.LastName, sr.FirstName, sr.MiddleName) AND @Birthday = sr.Birthday
ORDER BY CompleteDate DESC
GO
PRINT N'Creating [dbo].[uspGetModifiedSectionMinimalAgeSettings]...';


GO
CREATE PROCEDURE [dbo].[uspGetModifiedSectionMinimalAgeSettings]
    @ScreeningProfileID int,
    @LastModifiedDateUTC datetime
AS
SELECT a.ScreeningSectionID, a.MinimalAge, a.IsEnabled, a.LastModifiedDateUTC
FROM dbo.ScreeningProfileSectionAge a
    INNER JOIN dbo.vKiosk k ON a.ScreeningProfileID = k.ScreeningProfileID
WHERE a.LastModifiedDateUTC > @LastModifiedDateUTC AND k.ScreeningProfileID = @ScreeningProfileID
ORDER BY a.ScreeningSectionID ASC
RETURN 0
GO
PRINT N'Creating [dbo].[uspGetModifiedSectionMinimalAgeSettingsForKiosk]...';


GO
CREATE PROCEDURE [dbo].[uspGetModifiedSectionMinimalAgeSettingsForKiosk]
    @KioskID smallint,
    @LastModifiedDateUTC datetime
AS
SELECT a.ScreeningSectionID, a.MinimalAge, a.IsEnabled, a.LastModifiedDateUTC
FROM dbo.ScreeningProfileSectionAge a
    INNER JOIN dbo.vKiosk k ON a.ScreeningProfileID = k.ScreeningProfileID
WHERE a.LastModifiedDateUTC > @LastModifiedDateUTC AND k.KioskID = @KioskID
ORDER BY a.ScreeningSectionID ASC
RETURN 0
GO
PRINT N'Creating [dbo].[uspGetScreeningProfileByKioskID]...';


GO
CREATE PROCEDURE [dbo].[uspGetScreeningProfileByKioskID]
    @KioskID smallint
AS
BEGIN
    DECLARE @ScreeningProfileID int

    SELECT @ScreeningProfileID = ScreeningProfileID
    FROM dbo.vKiosk k
    WHERE k.KioskID = @KioskID

SELECT @ScreeningProfileID
END
GO
PRINT N'Creating [dbo].[uspGetScreeningResults]...';


GO
CREATE PROCEDURE [dbo].[uspGetScreeningResults]
@StartDate date,
@BatchSize int
AS
    SELECT TOP (@BatchSize)
        r.ScreeningResultID, 
        r.PatientName,
        r.Birthday
    FROM dbo.ScreeningResult r
    WHERE r.IsDeleted = 0 AND CreatedDate >= @StartDate
    ORDER BY r.CreatedDate ASC

RETURN 0
GO
PRINT N'Creating [dbo].[uspGetScreeningResultsForExport]...';


GO
CREATE PROCEDURE [dbo].[uspGetScreeningResultsForExport]
@BatchSize int = 45
AS
    SELECT TOP(@BatchSize) 
        r.ScreeningResultID, 
        r.PatientName,
        r.Birthday, 
        r.CreatedDate
    FROM dbo.ScreeningResult r
        LEFT JOIN export.SmartExportLog el ON r.ScreeningResultID = el.ScreeningResultID AND el.Completed = 1
    WHERE r.IsDeleted = 0 AND r.ExportDate IS NULL AND el.ScreeningResultID IS NULL
    ORDER BY r.CreatedDate DESC

RETURN 0
GO
PRINT N'Creating [dbo].[uspScreeningProfileRefreshKioskSettings]...';


GO
CREATE PROCEDURE [dbo].[uspScreeningProfileRefreshKioskSettings]
    @ScreeningProfileID int,
    @LastModifiedDateUTC datetime
AS
BEGIN

    UPDATE dbo.ScreeningProfileSectionAge SET
        LastModifiedDateUTC = @LastModifiedDateUTC
    WHERE ScreeningProfileID = @ScreeningProfileID


    UPDATE dbo.ScreeningProfileFrequency SET
        LastModifiedDateUTC = @LastModifiedDateUTC
    WHERE ScreeningProfileID = @ScreeningProfileID



END
RETURN 0
GO
PRINT N'Creating [dbo].[uspSetMissingPatientAddress]...';


GO
CREATE PROCEDURE [dbo].[uspSetMissingPatientAddress]
    @ID bigint,
    @StreetAddress nvarchar(512),
    @City nvarchar(255),
    @StateID char(2),
    @ZipCode char(5),
    @Phone char(14),
    @ExportedToHRN nvarchar(255)

AS
SET NOCOUNT ON

-- update result
UPDATE dbo.ScreeningResult SET
    StreetAddress = @StreetAddress,
    City = @City, 
    StateID = @StateID,
    ZipCode = @ZipCode,
    Phone = @Phone,
    ExportedToHRN = @ExportedToHRN
WHERE ScreeningResultID = @ID

-- update other screenings for the same patient 
-- which happen later and does not contain address
UPDATE target
SET
    target.StreetAddress = source.StreetAddress,
    target.City = source.City, 
    target.StateID = source.StateID,
    target.ZipCode = source.ZipCode,
    target.Phone = source.Phone,
    target.ExportedToHRN = source.ExportedToHRN
FROM  dbo.ScreeningResult target 
    INNER JOIN dbo.ScreeningResult source ON
            target.ScreeningResultID > source.ScreeningResultID
            AND target.PatientName = source.PatientName
            AND target.Birthday = source.Birthday
WHERE source.ScreeningResultID = @ID AND ISNULL(target.StreetAddress, '') = ''


UPDATE target
SET
     target.ExportedToHRN = source.ExportedToHRN
FROM  dbo.ScreeningResult target 
    INNER JOIN dbo.ScreeningResult source ON
            target.ScreeningResultID > source.ScreeningResultID
            AND target.PatientName = source.PatientName
            AND target.Birthday = source.Birthday
WHERE source.ScreeningResultID = @ID AND ISNULL(target.ExportedToHRN, '') = ''



-- update demographics - address
UPDATE target
SET
    target.StreetAddress = @StreetAddress,
    target.City = @City, 
    target.StateID = @StateID,
    target.ZipCode = @ZipCode,
    target.Phone = @Phone,
    target.ExportedToHRN = @ExportedToHRN
FROM  dbo.BhsDemographics target 
    INNER JOIN dbo.ScreeningResult source 
        ON target.ScreeningResultID = source.ScreeningResultID 
            OR (source.PatientName = target.PatientName AND source.Birthday = target.Birthday)
WHERE source.ScreeningResultID = @ID 
    AND ISNULL(target.StreetAddress, '') = ''
  

-- update demographics - EHR
UPDATE target
SET
    target.ExportedToHRN = @ExportedToHRN
FROM  dbo.BhsDemographics target 
    INNER JOIN dbo.ScreeningResult source 
        ON target.ScreeningResultID = source.ScreeningResultID 
            OR (source.PatientName = target.PatientName AND source.Birthday = target.Birthday)
WHERE source.ScreeningResultID = @ID 
    AND ISNULL(target.ExportedToHRN, '') = ''
GO
PRINT N'Creating [dbo].[uspUpdateDrugOfChoice]...';


GO
CREATE PROCEDURE [dbo].[uspUpdateDrugOfChoice]
    @ScreeningResultID bigint,
    @PrimaryAnswer int,
    @SecondaryAnswer int,
    @TertiaryAnswer int

AS
BEGIN
    DECLARE @DrugOfChoiceSectionID char(5) = 'DOCH';
    DECLARE @sectionAnswer int = 0

    IF @PrimaryAnswer > 0
        SET @sectionAnswer = 1

    MERGE INTO dbo.ScreeningSectionResult target
    USING (
        VALUES(@ScreeningResultID,@DrugOfChoiceSectionID, @sectionAnswer, @sectionAnswer,@sectionAnswer)
        ) AS source(ScreeningResultID,ScreeningSectionID,AnswerValue,Score,ScoreLevel)
        ON target.ScreeningResultID = source.ScreeningResultID AND target.ScreeningSectionID = source.ScreeningSectionID
    WHEN MATCHED THEN  
        UPDATE SET AnswerValue = source.AnswerValue, Score = source.Score,  ScoreLevel = source.ScoreLevel
    WHEN NOT MATCHED BY TARGET THEN  
        INSERT (ScreeningResultID,ScreeningSectionID,AnswerValue,Score,ScoreLevel) 
        VALUES (source.ScreeningResultID,source.ScreeningSectionID,source.AnswerValue,source.Score, source.ScoreLevel); 

    ;

    MERGE INTO dbo.ScreeningSectionQuestionResult target
    USING ( VALUES
        (@ScreeningResultID, @DrugOfChoiceSectionID, 1, @PrimaryAnswer),
        (@ScreeningResultID, @DrugOfChoiceSectionID, 2, @SecondaryAnswer),
        (@ScreeningResultID, @DrugOfChoiceSectionID, 3, @TertiaryAnswer)

    ) AS source(ScreeningResultID,ScreeningSectionID,QuestionID,AnswerValue)
        ON target.ScreeningResultID = source.ScreeningResultID 
            AND target.ScreeningSectionID = source.ScreeningSectionID
            AND target.QuestionID = source.QuestionID
    WHEN MATCHED THEN  
        UPDATE SET AnswerValue = source.AnswerValue
    WHEN NOT MATCHED BY TARGET THEN  
        INSERT (ScreeningResultID,ScreeningSectionID,QuestionID,AnswerValue) 
        VALUES (source.ScreeningResultID,source.ScreeningSectionID,source.QuestionID,source.AnswerValue); 

    ;
END
RETURN 0
GO
PRINT N'Creating [dbo].[uspUpdateScreeningProfileAgeSettings]...';


GO
CREATE PROCEDURE [dbo].[uspUpdateScreeningProfileAgeSettings]
    @ScreeningProfileID int,
    @ScreeningSectionID char(5),
    @MinimalAge tinyint,
    @IsEnabled bit,
    @LastModifiedDateUTC datetimeoffset
AS
BEGIN
IF NOT EXISTS(SELECT NULL FROM dbo.ScreeningProfileSectionAge WHERE ScreeningProfileID = @ScreeningProfileID AND ScreeningSectionID = @ScreeningSectionID)
    INSERT INTO dbo.ScreeningProfileSectionAge(ScreeningProfileID, ScreeningSectionID, MinimalAge, IsEnabled, LastModifiedDateUTC)
    VALUES(@ScreeningProfileID, @ScreeningSectionID, @MinimalAge, @IsEnabled, @LastModifiedDateUTC)
ELSE
    UPDATE dbo.ScreeningProfileSectionAge
        SET MinimalAge = @MinimalAge, IsEnabled=@IsEnabled, LastModifiedDateUTC = @LastModifiedDateUTC
    WHERE  ScreeningProfileID = @ScreeningProfileID AND ScreeningSectionID = @ScreeningSectionID 
        AND  (MinimalAge <> @MinimalAge OR IsEnabled <> @IsEnabled)
END
RETURN 0
GO
PRINT N'Creating [dbo].[uspUpdateScreeningProfileFrequency]...';


GO
CREATE PROCEDURE [dbo].[uspUpdateScreeningProfileFrequency]
    @ScreeningProfileID int,
    @ScreeningSectionID char(5),
    @Frequency int,
    @LastModifiedDateUTC datetimeoffset
AS
BEGIN
IF NOT EXISTS(SELECT NULL FROM dbo.ScreeningProfileFrequency WHERE  ScreeningProfileID = @ScreeningProfileID AND ScreeningSectionID = @ScreeningSectionID)
    INSERT INTO dbo.ScreeningProfileFrequency(
        ScreeningProfileID, 
        ScreeningSectionID, 
        Frequency, 
        LastModifiedDateUTC
    )
    VALUES(
        @ScreeningProfileID, 
        @ScreeningSectionID, 
        @Frequency, 
        @LastModifiedDateUTC
    )
ELSE
    UPDATE dbo.ScreeningProfileFrequency SET 
        Frequency = @Frequency, 
        LastModifiedDateUTC = @LastModifiedDateUTC
    WHERE ScreeningProfileID = @ScreeningProfileID AND ScreeningSectionID = @ScreeningSectionID AND Frequency <> @Frequency

END
RETURN 0
GO
PRINT N'Creating [dbo].[uspUpdateScreeningResultPatientInfo]...';


GO
CREATE PROCEDURE [dbo].[uspUpdateScreeningResultPatientInfo]
    @ScreeningResultID bigint,
    @FirstName nvarchar(128),
    @LastName nvarchar(128),
    @MiddleName nvarchar(128),
    @Birthday date,
    @Phone varchar(14),
    @StreetAddress nvarchar(512),
    @City nvarchar(255),
    @StateID varchar(2),
    @ZipCode varchar(5)
AS
BEGIN
    UPDATE dbo.ScreeningResult SET
    [FirstName] = @FirstName
    ,[LastName] = @LastName
    ,[MiddleName] = @MiddleName
    ,[Birthday] = @Birthday
    ,[Phone] = @Phone
    ,[StreetAddress] = @StreetAddress
    ,[City] = @City
    ,[StateID] = @StateID
    ,[ZipCode] = @ZipCode
WHERE ScreeningResultID = @ScreeningResultID;

-- update name 
UPDATE dbo.BhsDemographics SET
    [FirstName] = @FirstName
    ,[LastName] = @LastName
    ,[MiddleName] = @MiddleName
    ,[Birthday] = @Birthday
    ,[Phone] = @Phone
    ,[StreetAddress] = @StreetAddress
    ,[City] = @City
    ,[StateID] = @StateID
    ,[ZipCode] = @ZipCode
WHERE ScreeningResultID = @ScreeningResultID AND CompleteDate IS NULL;


-- reset export attempts if failed before
UPDATE l
SET l.FailedAttemptCount = 0, l.Completed = 0
FROM export.SmartExportLog l
    INNER JOIN dbo.ScreeningResult r ON l.ScreeningResultID = r.ScreeningResultID
WHERE l.ScreeningResultID = @ScreeningResultID 
    AND Succeed = 0
    AND r.ExportDate IS NULL


RETURN 0
END
GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[export] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[export] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[Hangfire] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[dbo] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[fn_GetFullName] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[fn_GetPatientName] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';



GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[AnswerScale] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';



GO
GRANT SELECT
    ON OBJECT::[dbo].[AnswerScaleOption] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[BhsDemographics] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[BhsDemographics] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[BhsDemographics] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[BhsDemographics] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[BhsVisit] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[BhsVisit] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[BhsVisit] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[BhsVisit] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';

GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[BranchLocation] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[BranchLocation] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[BranchLocation] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[BranchLocation] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[DbVersion] TO PUBLIC;


GO
PRINT N'Creating Permission...';


GO
GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[ErrorLog] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[ErrorLog] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[ErrorLog] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[ErrorLog] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[Kiosk] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[Kiosk] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[Kiosk] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[Kiosk] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[License] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[License] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[License] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[License] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[Roles] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[RpmsCredentials] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[RpmsCredentials] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[RpmsCredentials] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[RpmsCredentials] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[Screening] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[ScreeningFrequency] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[ScreeningFrequency] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[ScreeningFrequency] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[ScreeningResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[ScreeningResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[ScreeningResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[ScreeningResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[ScreeningScoreLevel] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[ScreeningSection] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[ScreeningSection] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[ScreeningSection] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[ScreeningSection] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[ScreeningSectionAge] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[ScreeningSectionAge] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[ScreeningSectionAge] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[ScreeningSectionQuestion] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[ScreeningSectionQuestionResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[ScreeningSectionQuestionResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[ScreeningSectionQuestionResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[ScreeningSectionResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[ScreeningSectionResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[ScreeningSectionResult] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[SecurityEvent] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[SecurityEvent] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[SecurityEvent] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[SecurityEvent] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[SecurityEventCategory] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[SecurityLog] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[SecurityLog] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[SecurityLog] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[SecurityLog] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[SecurityQuestion] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[State] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[SystemSettings] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[SystemSettings] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[SystemSettings] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[SystemSettings] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[UserDetails] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[UserDetails] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[UserDetails] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[UserDetails] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[UserPasswordHistory] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[UserPasswordHistory] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[UserPasswordHistory] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[UserPasswordHistory] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[Users] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[Users] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[Users] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[Users] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[Users_BranchLocation] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[Users_BranchLocation] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[Users_BranchLocation] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[Users_BranchLocation] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[UsersInRoles] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[dbo].[UsersInRoles] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[dbo].[UsersInRoles] TO [frontdesk_appaccount];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[dbo].[UsersInRoles] TO [frontdesk_appaccount];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

print 'Populating dbo.NewVisitReferralRecommendation...'
GO
MERGE INTO dbo.NewVisitReferralRecommendation as target
USING (VALUES
(1, 'Behavioral Health Department', 1),
(2, 'Crisis/Emergency Service', 2),
(3, 'Medical Department', 3),
(4, 'Medication	Assisted Treatment (MAT)', 4),
(5, 'Pain Management', 5),
(6, 'Psychiatrist', 6),
(9, 'RX', 7),
(7, 'Other', 8),
(8, 'Not indicated/offered', 100)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE
;

GO
;

---------------------------------
GO
print 'Populating dbo.[NewVisitReferralRecommendationAccepted]...'
GO
MERGE INTO dbo.[NewVisitReferralRecommendationAccepted] as target
USING (VALUES
(1, 'Yes', 1),
(2, 'No', 2),
(8, 'Not indicated/offered', 100)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
;
GO

---------------------------------
GO
print 'Populating dbo.[ReasonNewVisitReferralRecommendationNotAccepted]...'
GO
MERGE INTO dbo.[ReasonNewVisitReferralRecommendationNotAccepted] as target
USING (VALUES
(0, 'Accepted', 1),
(1, 'Service perceived as not needed', 3),
(2, 'Has existing provider', 4),
(3, 'Wants other (external) provider', 5),
(4, 'Distance � too far away', 6),
(5, 'Concerned about confidentiality', 7),
(6, 'No transportation', 8),
(7, 'Work', 9),
(8, 'Not indicated/offered', 2),
(9, 'No childcare', 10),
(10, 'Other responsibility', 11),
(11, 'Too ill, elderly, or handicap', 12),
(12, 'Decline to answer', 13)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
;

---------------------------------
GO
print 'Populating dbo.[Discharged]...'
GO
MERGE INTO dbo.[Discharged] as target
USING (VALUES
(0, 'No', 1),
(1, 'Service completed', 2),
(2, 'Symptom reduction', 3),
(3, 'Patient requested discontinuation of service', 3),
(4, 'Address changed � out of service area', 4),
(5, 'Could not contact', 5),
(6, 'Transferred to different provider', 6),
(7, 'Deceased', 7)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
;
GO


print 'Populating dbo.[Race]...'
GO
MERGE INTO dbo.[Race] as target
USING (VALUES
(1, 'American Indian', 2),
(7, 'Alaska Native', 3),
(2, 'Asian', 4),
(3, 'Black or African American', 5),
(4, 'Hispanic or Latino', 6),
(5, 'Native Hawaiian or Other Pacific Islander', 7),
(8, 'White', 8),
(9, 'Other', 9),
(6, 'Unknown', 10)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex, LastModifiedDateUTC = GETUTCDATE()
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
;
GO

print 'Populating dbo.[Gender]...'
GO
MERGE INTO dbo.[Gender] as target
USING (VALUES
(1, 'Male', 2),
(2, 'Female', 3),
(3, 'Transgender', 4),
(5, 'Not Female, Male, or Transgender', 5),
(4, 'Don�t Know', 6),
(6, 'Decline to Answer', 7)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex, LastModifiedDateUTC = GETUTCDATE()
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
;
GO


print 'Populating dbo.[SexualOrientation]...'
GO
MERGE INTO dbo.[SexualOrientation] as target
USING (VALUES
(1, 'Straight/Heterosexual', 2),
(3, 'Gay/Lesbian', 3),
(2, 'Bisexual', 4),
(5, 'Other', 5),
(4, 'Don�t Know', 6),
(6, 'Decline to Answer', 7)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex, LastModifiedDateUTC = GETUTCDATE()
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
;
GO

print 'Populating dbo.[MaritalStatus]...'
GO
MERGE INTO dbo.[MaritalStatus] as target
USING (VALUES
(4, 'Single', 2),
(2, 'Married', 3),
(3, 'Partner', 4),
(6, 'Separated', 5),
(1, 'Divorced', 6),
(5, 'Widowed', 7)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex, LastModifiedDateUTC = GETUTCDATE()
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
;
GO

print 'Populating dbo.[EducationLevel]...'
GO

MERGE INTO dbo.[EducationLevel] as target
USING (VALUES
(1, 'Elementary School', 2),
(2, 'Some High School', 3),
(11, 'Completed GED or High School Equivalent', 4),
(3, 'Completed High School Diploma', 5),

(5, 'Technical School', 6),
(6, 'AA degree', 7),
(7, 'Bachelor''s Degree', 8),
(8, 'Master''s Degree', 9),
(10, 'Doctoral Degree', 10)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex, LastModifiedDateUTC = GETUTCDATE()
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE ;
GO



print 'Populating dbo.[LivingOnReservation]...'
GO

MERGE INTO dbo.LivingOnReservation as target
USING (VALUES
(1, 'On reservation', 2),
(2, 'Off reservation', 3)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex, LastModifiedDateUTC = GETUTCDATE()
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
;
GO


print 'Populating dbo.[MilitaryExperience]...'
GO

MERGE INTO dbo.MilitaryExperience as target
USING (VALUES
(1, 'None', 2),
(2, 'Active duty', 3),
(3, 'Veteran', 4),
(4, 'Deployed to a combat zone', 5)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex, LastModifiedDateUTC = GETUTCDATE()
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE
;
GO


print 'Populating dbo.[TreatmentAction]...'
GO

MERGE INTO dbo.TreatmentAction as target
USING (VALUES
(1, 'Evaluation', 1),
(2, 'Education', 2),
(3, 'Brief Intervention', 3),
(4, 'Brief Treatment', 4),
(5, 'Referral to Treatment', 5),
(6, 'Other', 8)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE
;
GO

print 'Populating dbo.[PatientAttendedVisit]...'
GO

MERGE INTO dbo.PatientAttendedVisit as target
USING (VALUES
(1, 'Yes', 1),
(2, 'No', 2),
(3, 'Unknown', 3),
(4, 'Not indicated/offered', 4)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE
;
GO

print 'Populating dbo.[FollowUpContactOutcome]...'
GO
MERGE INTO dbo.FollowUpContactOutcome as target
USING (VALUES
(0, 'None', 1),
(1, 'Talked with patient or parent', 2),
(2, 'Left message', 3),
(3, 'Phone not working', 4),
(4, 'Unable to leave message', 5)
) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
;
GO



print 'Populating dbo.[DrugOfChoice]...'
GO

MERGE INTO dbo.DrugOfChoice as target
USING (VALUES
(0, '(None) Don�t Use Any Other Drugs', 1),
(1, 'Marijuana/Cannabis/Wax/Hashish', 2),
(2, 'Methamphetamine', 3),
(3, 'Other Amphetamines', 4),
(4, 'Benzodiazepines', 5),
(5, 'Opioid/Heroin', 6),
(6, 'Opioid/Medication', 7),
(7, 'Cocaine/Crack', 8),
(8, 'Hallucinogens/Psychedelics', 9),
(9, 'Sedatives/Hypnotics/Non-Benzo Tranquilizers', 10),
(10, 'Inhalants', 11),
(11, 'Barbiturates/Downers', 12),
(12, 'PCP/Ketamine/GHB/Designer Drugs', 13),
(13, 'Other Stimulants', 14),
(14, 'Other', 15)

) as source(ID, [Name], OrderIndex) 
    ON target.ID = source.ID
WHEN MATCHED THEN 
    UPDATE SET [Name] = source.[Name], OrderIndex = source.OrderIndex
WHEN NOT MATCHED BY TARGET THEN
    INSERT(ID, [Name], OrderIndex) 
        VALUES (source.ID, source.[Name], source.OrderIndex)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE
;
GO


print 'Populating dbo.[SecurityQuestion]...'
GO

SET IDENTITY_INSERT SecurityQuestion ON
GO

MERGE INTO dbo.SecurityQuestion as target
USING (VALUES
(1, 'What was your childhood nickname?'),
(2, 'What is the name of your favorite childhood friend?'),
(3, 'What was your favorite subject in High school?'),
(4, 'What was the name of your first stuffed animal?'),
(5, 'Who is your favorite movie hero?'),
(6, 'What is your ideal vacation destination?'),
(7, 'In what city or town did your mother and father meet?'),
(8, 'What is the first name of the boy or girl that you first kissed?'),
(9, 'What was the last name of your favorite teacher in school?'),
(10, 'What is the name of the neighbors near the house you grew up in?')

) as source(QuestionID, QuestionText) 
    ON target.QuestionID = source.QuestionID
WHEN MATCHED THEN 
    UPDATE SET QuestionText = source.QuestionText
WHEN NOT MATCHED BY TARGET THEN
    INSERT(QuestionID, QuestionText) 
        VALUES (source.QuestionID, source.QuestionText)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE
;
GO

SET IDENTITY_INSERT SecurityQuestion OFF
GO

print 'Populating dbo.[Roles]...'
GO

MERGE INTO dbo.Roles as target
USING (VALUES
('Super Administrator'),
('Branch Administrator'),
('Staff'),
('Medical Professionals'),
('Lead Medical Professionals')
) as source(Rolename) 
    ON target.Rolename = source.Rolename
WHEN NOT MATCHED BY TARGET THEN
    INSERT(Rolename) 
        VALUES (source.Rolename)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE
;
GO



print 'Populating dbo.[SecurityEventCategory]...'
GO
MERGE INTO dbo.SecurityEventCategory as target
USING (VALUES(1, 'System Security'),
                    (2, 'Accessing patient info'),
                    (3, 'Branch management'),
                    (4, 'Kiosk management')
) as source(SecurityEventCategoryID, CategoryName) 
    ON target.SecurityEventCategoryID = source.SecurityEventCategoryID
WHEN MATCHED THEN 
    UPDATE SET CategoryName = source.CategoryName
WHEN NOT MATCHED BY TARGET THEN
    INSERT(SecurityEventCategoryID, CategoryName) 
        VALUES (source.SecurityEventCategoryID, source.CategoryName)
;
GO

GO
print 'Populating dbo.[SecurityEvent]...'
GO

MERGE INTO dbo.SecurityEvent as target
USING ( VALUES
--system security
(1, 1, 'User was logged into the system',1),
(2, 1, 'Password was changed',1),
(3, 1, 'Security question and/or answer were changed',1),
(4, 1, 'New user was created',1),
(5, 1, 'New account was activated',1),
-- accessing screen results 
(6, 2, 'Behavioral Health Screening Report was read',1),
(7, 2, 'Behavioral Health Screening Report was printed',1),
(12, 2, 'Behavioral Health Screening Report was removed',1),
(13, 2, 'Patient contact information was changed',1),	  
(14, 2, 'Behavioral Health Screening Report was exported',1),
(15, 2, 'BHS Visit Information was completed',1),
(16, 2, 'BHS Visit was created manually',1),
(18, 2, 'BHS Patient Demographics was completed.',1),
(19, 2, 'BHS Follow-Up was completed',1),
(20, 2, 'Patient address was updated from RPMS',1),
(21, 2, 'BHS Visit Report was printed',1),
(22, 2, 'BHS Follow-Up Report was printed',1),
(23, 2, 'BHS Patient Demographics was printed',1),
(24, 2, 'Patient Demographics was printed',1),
(25, 2, 'Drug List Use was changed',1),


-- Branch location mgmt
(8, 3, 'New branch location was created',1),
(9, 3, 'Branch location was removed',1),
-- Kiosk mgmt
(10, 4, 'New kiosk was registered',1),
(11, 4, 'Kiosk was removed',1)
) as source(SecurityEventID, SecurityEventCategoryID, [Description], Enabled) 
    ON target.SecurityEventID = source.SecurityEventID
WHEN MATCHED THEN 
    UPDATE SET [Description] = source.[Description], Enabled = source.Enabled
WHEN NOT MATCHED BY TARGET THEN
    INSERT(SecurityEventID, SecurityEventCategoryID, [Description], Enabled) 
        VALUES (source.SecurityEventID, source.SecurityEventCategoryID, source.[Description], Enabled)
;
GO


GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END

GO


GRANT SELECT, DELETE, UPDATE, INSERT ON dbo.ScreeningProfile TO [frontdesk_appaccount];
GRANT SELECT, DELETE, UPDATE, INSERT ON dbo.ScreeningProfileFrequency TO [frontdesk_appaccount];
GRANT SELECT, DELETE, UPDATE, INSERT ON dbo.ScreeningProfileSectionAge TO [frontdesk_appaccount];

IF NOT EXISTS(SELECT 1 FROM dbo.DbVersion WHERE DbVersion =  '9.5.0.1')
INSERT INTO dbo.DbVersion(DbVersion) VALUES('9.5.0.1');


GO
PRINT N'Update complete.';


GO

IF NOT EXISTS(SELECT 1 FROM dbo.DbVersion WHERE DbVersion =  '9.5.0.1')
INSERT INTO dbo.DbVersion(DbVersion) VALUES('9.5.0.1');

