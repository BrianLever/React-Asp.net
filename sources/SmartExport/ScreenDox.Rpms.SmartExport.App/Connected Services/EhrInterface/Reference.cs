//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScreenDox.Rpms.SmartExport.App.EhrInterface {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientSearch", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient))]
    public partial class PatientSearch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int matchRankField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfBirth {
            get {
                return this.DateOfBirthField;
            }
            set {
                if ((this.DateOfBirthField.Equals(value) != true)) {
                    this.DateOfBirthField = value;
                    this.RaisePropertyChanged("DateOfBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int matchRank {
            get {
                return this.matchRankField;
            }
            set {
                if ((this.matchRankField.Equals(value) != true)) {
                    this.matchRankField = value;
                    this.RaisePropertyChanged("matchRank");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class Patient : ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EHRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneHomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneOfficeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EHR {
            get {
                return this.EHRField;
            }
            set {
                if ((object.ReferenceEquals(this.EHRField, value) != true)) {
                    this.EHRField = value;
                    this.RaisePropertyChanged("EHR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneHome {
            get {
                return this.PhoneHomeField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneHomeField, value) != true)) {
                    this.PhoneHomeField = value;
                    this.RaisePropertyChanged("PhoneHome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneOffice {
            get {
                return this.PhoneOfficeField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneOfficeField, value) != true)) {
                    this.PhoneOfficeField = value;
                    this.RaisePropertyChanged("PhoneOffice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateID {
            get {
                return this.StateIDField;
            }
            set {
                if ((object.ReferenceEquals(this.StateIDField, value) != true)) {
                    this.StateIDField = value;
                    this.RaisePropertyChanged("StateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreetAddress {
            get {
                return this.StreetAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetAddressField, value) != true)) {
                    this.StreetAddressField = value;
                    this.RaisePropertyChanged("StreetAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Visit", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class Visit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.Location LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceCategoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.Location Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceCategory {
            get {
                return this.ServiceCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceCategoryField, value) != true)) {
                    this.ServiceCategoryField = value;
                    this.RaisePropertyChanged("ServiceCategory");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExportTask", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class ExportTask : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.CrisisAlert[] CrisisAlertsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.Exam[] ExamsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.HealthFactor[] HealthFactorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientRecordModification[] PatientRecordModificationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportScreeningSectionPreview[] ScreeningSectionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.CrisisAlert[] CrisisAlerts {
            get {
                return this.CrisisAlertsField;
            }
            set {
                if ((object.ReferenceEquals(this.CrisisAlertsField, value) != true)) {
                    this.CrisisAlertsField = value;
                    this.RaisePropertyChanged("CrisisAlerts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.Exam[] Exams {
            get {
                return this.ExamsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamsField, value) != true)) {
                    this.ExamsField = value;
                    this.RaisePropertyChanged("Exams");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.HealthFactor[] HealthFactors {
            get {
                return this.HealthFactorsField;
            }
            set {
                if ((object.ReferenceEquals(this.HealthFactorsField, value) != true)) {
                    this.HealthFactorsField = value;
                    this.RaisePropertyChanged("HealthFactors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientRecordModification[] PatientRecordModifications {
            get {
                return this.PatientRecordModificationsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientRecordModificationsField, value) != true)) {
                    this.PatientRecordModificationsField = value;
                    this.RaisePropertyChanged("PatientRecordModifications");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportScreeningSectionPreview[] ScreeningSections {
            get {
                return this.ScreeningSectionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreeningSectionsField, value) != true)) {
                    this.ScreeningSectionsField = value;
                    this.RaisePropertyChanged("ScreeningSections");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CrisisAlert", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class CrisisAlert : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfNoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentTypeAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocumentTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EntryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfNote {
            get {
                return this.DateOfNoteField;
            }
            set {
                if ((this.DateOfNoteField.Equals(value) != true)) {
                    this.DateOfNoteField = value;
                    this.RaisePropertyChanged("DateOfNote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentTypeAbbr {
            get {
                return this.DocumentTypeAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentTypeAbbrField, value) != true)) {
                    this.DocumentTypeAbbrField = value;
                    this.RaisePropertyChanged("DocumentTypeAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocumentTypeID {
            get {
                return this.DocumentTypeIDField;
            }
            set {
                if ((this.DocumentTypeIDField.Equals(value) != true)) {
                    this.DocumentTypeIDField = value;
                    this.RaisePropertyChanged("DocumentTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EntryDate {
            get {
                return this.EntryDateField;
            }
            set {
                if ((this.EntryDateField.Equals(value) != true)) {
                    this.EntryDateField = value;
                    this.RaisePropertyChanged("EntryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Exam", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class Exam : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultLabelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamID {
            get {
                return this.ExamIDField;
            }
            set {
                if ((this.ExamIDField.Equals(value) != true)) {
                    this.ExamIDField = value;
                    this.RaisePropertyChanged("ExamID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamName {
            get {
                return this.ExamNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamNameField, value) != true)) {
                    this.ExamNameField = value;
                    this.RaisePropertyChanged("ExamName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultLabel {
            get {
                return this.ResultLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultLabelField, value) != true)) {
                    this.ResultLabelField = value;
                    this.RaisePropertyChanged("ResultLabel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HealthFactor", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class HealthFactor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FactorIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Factor {
            get {
                return this.FactorField;
            }
            set {
                if ((object.ReferenceEquals(this.FactorField, value) != true)) {
                    this.FactorField = value;
                    this.RaisePropertyChanged("Factor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FactorID {
            get {
                return this.FactorIDField;
            }
            set {
                if ((this.FactorIDField.Equals(value) != true)) {
                    this.FactorIDField = value;
                    this.RaisePropertyChanged("FactorID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientRecordModification", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class PatientRecordModification : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientRecordExportFields FieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdateWithValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentValue {
            get {
                return this.CurrentValueField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentValueField, value) != true)) {
                    this.CurrentValueField = value;
                    this.RaisePropertyChanged("CurrentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientRecordExportFields Field {
            get {
                return this.FieldField;
            }
            set {
                if ((this.FieldField.Equals(value) != true)) {
                    this.FieldField = value;
                    this.RaisePropertyChanged("Field");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdateWithValue {
            get {
                return this.UpdateWithValueField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdateWithValueField, value) != true)) {
                    this.UpdateWithValueField = value;
                    this.RaisePropertyChanged("UpdateWithValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExportScreeningSectionPreview", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class ExportScreeningSectionPreview : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScoreLevelLabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScreeningSectionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScoreLevelLabel {
            get {
                return this.ScoreLevelLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.ScoreLevelLabelField, value) != true)) {
                    this.ScoreLevelLabelField = value;
                    this.RaisePropertyChanged("ScoreLevelLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreeningSectionID {
            get {
                return this.ScreeningSectionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreeningSectionIDField, value) != true)) {
                    this.ScreeningSectionIDField = value;
                    this.RaisePropertyChanged("ScreeningSectionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientRecordExportFields", Namespace="http://www.screendox.com")]
    public enum PatientRecordExportFields : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressLine1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressLine2 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressLine3 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Phone = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        City = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StateID = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ZipCode = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExportResult", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class ExportResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportFault FaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessfulField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionName {
            get {
                return this.ActionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionNameField, value) != true)) {
                    this.ActionNameField = value;
                    this.RaisePropertyChanged("ActionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportFault Fault {
            get {
                return this.FaultField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultField, value) != true)) {
                    this.FaultField = value;
                    this.RaisePropertyChanged("Fault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccessful {
            get {
                return this.IsSuccessfulField;
            }
            set {
                if ((this.IsSuccessfulField.Equals(value) != true)) {
                    this.IsSuccessfulField = value;
                    this.RaisePropertyChanged("IsSuccessful");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExportFault", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class ExportFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportFaultType FaultTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportFaultType FaultType {
            get {
                return this.FaultTypeField;
            }
            set {
                if ((this.FaultTypeField.Equals(value) != true)) {
                    this.FaultTypeField = value;
                    this.RaisePropertyChanged("FaultType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfoMessage {
            get {
                return this.InfoMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoMessageField, value) != true)) {
                    this.InfoMessageField = value;
                    this.RaisePropertyChanged("InfoMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExportFaultType", Namespace="http://schemas.datacontract.org/2004/07/RPMS.Common.Models")]
    public enum ExportFaultType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PatientRecordUpdateFault = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HealthFactorFault = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExamFault = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CrisisAlertFault = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExportTaskIsEmpty = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScreeningDataExportFault = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScreeningResultRecord", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class ScreeningResultRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ScreendoxRecordNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ScreeningDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.ScreeningResultSectionRecord[] SectionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VisitIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ScreendoxRecordNo {
            get {
                return this.ScreendoxRecordNoField;
            }
            set {
                if ((this.ScreendoxRecordNoField.Equals(value) != true)) {
                    this.ScreendoxRecordNoField = value;
                    this.RaisePropertyChanged("ScreendoxRecordNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ScreeningDate {
            get {
                return this.ScreeningDateField;
            }
            set {
                if ((this.ScreeningDateField.Equals(value) != true)) {
                    this.ScreeningDateField = value;
                    this.RaisePropertyChanged("ScreeningDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.ScreeningResultSectionRecord[] Sections {
            get {
                return this.SectionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionsField, value) != true)) {
                    this.SectionsField = value;
                    this.RaisePropertyChanged("Sections");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VisitID {
            get {
                return this.VisitIDField;
            }
            set {
                if ((this.VisitIDField.Equals(value) != true)) {
                    this.VisitIDField = value;
                    this.RaisePropertyChanged("VisitID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScreeningResultSectionRecord", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class ScreeningResultSectionRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.ScreeningResultSectionAnswerRecord[] AnswersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndicatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScoreLevelLabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScreeningSectionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.ScreeningResultSectionAnswerRecord[] Answers {
            get {
                return this.AnswersField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswersField, value) != true)) {
                    this.AnswersField = value;
                    this.RaisePropertyChanged("Answers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicates {
            get {
                return this.IndicatesField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicatesField, value) != true)) {
                    this.IndicatesField = value;
                    this.RaisePropertyChanged("Indicates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScoreLevel {
            get {
                return this.ScoreLevelField;
            }
            set {
                if ((this.ScoreLevelField.Equals(value) != true)) {
                    this.ScoreLevelField = value;
                    this.RaisePropertyChanged("ScoreLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScoreLevelLabel {
            get {
                return this.ScoreLevelLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.ScoreLevelLabelField, value) != true)) {
                    this.ScoreLevelLabelField = value;
                    this.RaisePropertyChanged("ScoreLevelLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreeningSectionID {
            get {
                return this.ScreeningSectionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreeningSectionIDField, value) != true)) {
                    this.ScreeningSectionIDField = value;
                    this.RaisePropertyChanged("ScreeningSectionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScreeningResultSectionAnswerRecord", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class ScreeningResultSectionAnswerRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnswerTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AnswerValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnswerText {
            get {
                return this.AnswerTextField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerTextField, value) != true)) {
                    this.AnswerTextField = value;
                    this.RaisePropertyChanged("AnswerText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AnswerValue {
            get {
                return this.AnswerValueField;
            }
            set {
                if ((this.AnswerValueField.Equals(value) != true)) {
                    this.AnswerValueField = value;
                    this.RaisePropertyChanged("AnswerValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionID {
            get {
                return this.QuestionIDField;
            }
            set {
                if ((this.QuestionIDField.Equals(value) != true)) {
                    this.QuestionIDField = value;
                    this.RaisePropertyChanged("QuestionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuestionText {
            get {
                return this.QuestionTextField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionTextField, value) != true)) {
                    this.QuestionTextField = value;
                    this.RaisePropertyChanged("QuestionText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientValidationResult", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class PatientValidationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] CorrectionsLogField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient PatientRecordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] CorrectionsLog {
            get {
                return this.CorrectionsLogField;
            }
            set {
                if ((object.ReferenceEquals(this.CorrectionsLogField, value) != true)) {
                    this.CorrectionsLogField = value;
                    this.RaisePropertyChanged("CorrectionsLog");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient PatientRecord {
            get {
                return this.PatientRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientRecordField, value) != true)) {
                    this.PatientRecordField = value;
                    this.RaisePropertyChanged("PatientRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExportMetaInfo", Namespace="http://www.screendox.com")]
    [System.SerializableAttribute()]
    public partial class ExportMetaInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNextGenModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRpmsModeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNextGenMode {
            get {
                return this.IsNextGenModeField;
            }
            set {
                if ((this.IsNextGenModeField.Equals(value) != true)) {
                    this.IsNextGenModeField = value;
                    this.RaisePropertyChanged("IsNextGenMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRpmsMode {
            get {
                return this.IsRpmsModeField;
            }
            set {
                if ((this.IsRpmsModeField.Equals(value) != true)) {
                    this.IsRpmsModeField = value;
                    this.RaisePropertyChanged("IsRpmsMode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EhrInterface.IEhrInterface")]
    public interface IEhrInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetMatchedPatients", ReplyAction="http://tempuri.org/IEhrInterface/GetMatchedPatientsResponse")]
        ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient[] GetMatchedPatients(ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient searchPattern, int currentPageIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetMatchedPatients", ReplyAction="http://tempuri.org/IEhrInterface/GetMatchedPatientsResponse")]
        System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient[]> GetMatchedPatientsAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient searchPattern, int currentPageIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetPatientCount", ReplyAction="http://tempuri.org/IEhrInterface/GetPatientCountResponse")]
        int GetPatientCount(ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient searchPattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetPatientCount", ReplyAction="http://tempuri.org/IEhrInterface/GetPatientCountResponse")]
        System.Threading.Tasks.Task<int> GetPatientCountAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient searchPattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetPatientRecord", ReplyAction="http://tempuri.org/IEhrInterface/GetPatientRecordResponse")]
        ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient GetPatientRecord(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch searchPattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetPatientRecord", ReplyAction="http://tempuri.org/IEhrInterface/GetPatientRecordResponse")]
        System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient> GetPatientRecordAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch searchPattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetScheduledVisitsByPatient", ReplyAction="http://tempuri.org/IEhrInterface/GetScheduledVisitsByPatientResponse")]
        ScreenDox.Rpms.SmartExport.App.EhrInterface.Visit[] GetScheduledVisitsByPatient(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord, int currentPageIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetScheduledVisitsByPatient", ReplyAction="http://tempuri.org/IEhrInterface/GetScheduledVisitsByPatientResponse")]
        System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.Visit[]> GetScheduledVisitsByPatientAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord, int currentPageIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetScheduledVisitsByPatientCount", ReplyAction="http://tempuri.org/IEhrInterface/GetScheduledVisitsByPatientCountResponse")]
        int GetScheduledVisitsByPatientCount(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetScheduledVisitsByPatientCount", ReplyAction="http://tempuri.org/IEhrInterface/GetScheduledVisitsByPatientCountResponse")]
        System.Threading.Tasks.Task<int> GetScheduledVisitsByPatientCountAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetVisitRecord", ReplyAction="http://tempuri.org/IEhrInterface/GetVisitRecordResponse")]
        ScreenDox.Rpms.SmartExport.App.EhrInterface.Visit GetVisitRecord(int visitID, ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetVisitRecord", ReplyAction="http://tempuri.org/IEhrInterface/GetVisitRecordResponse")]
        System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.Visit> GetVisitRecordAsync(int visitID, ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/PreviewExportResult", ReplyAction="http://tempuri.org/IEhrInterface/PreviewExportResultResponse")]
        ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportTask PreviewExportResult(FrontDesk.ScreeningResult screeningResult, ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch selectedPatient, int selectedVisitRowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/PreviewExportResult", ReplyAction="http://tempuri.org/IEhrInterface/PreviewExportResultResponse")]
        System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportTask> PreviewExportResultAsync(FrontDesk.ScreeningResult screeningResult, ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch selectedPatient, int selectedVisitRowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/CommitExportTask", ReplyAction="http://tempuri.org/IEhrInterface/CommitExportTaskResponse")]
        ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportResult[] CommitExportTask(int patientID, int visitID, ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportTask exportTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/CommitExportTask", ReplyAction="http://tempuri.org/IEhrInterface/CommitExportTaskResponse")]
        System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportResult[]> CommitExportTaskAsync(int patientID, int visitID, ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportTask exportTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/ExportScreeningData", ReplyAction="http://tempuri.org/IEhrInterface/ExportScreeningDataResponse")]
        ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportResult[] ExportScreeningData(ScreenDox.Rpms.SmartExport.App.EhrInterface.ScreeningResultRecord screeningResultRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/ExportScreeningData", ReplyAction="http://tempuri.org/IEhrInterface/ExportScreeningDataResponse")]
        System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportResult[]> ExportScreeningDataAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.ScreeningResultRecord screeningResultRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/ValidatePatientRecord", ReplyAction="http://tempuri.org/IEhrInterface/ValidatePatientRecordResponse")]
        ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientValidationResult ValidatePatientRecord(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/ValidatePatientRecord", ReplyAction="http://tempuri.org/IEhrInterface/ValidatePatientRecordResponse")]
        System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientValidationResult> ValidatePatientRecordAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetMeta", ReplyAction="http://tempuri.org/IEhrInterface/GetMetaResponse")]
        ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportMetaInfo GetMeta();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEhrInterface/GetMeta", ReplyAction="http://tempuri.org/IEhrInterface/GetMetaResponse")]
        System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportMetaInfo> GetMetaAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEhrInterfaceChannel : ScreenDox.Rpms.SmartExport.App.EhrInterface.IEhrInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EhrInterfaceClient : System.ServiceModel.ClientBase<ScreenDox.Rpms.SmartExport.App.EhrInterface.IEhrInterface>, ScreenDox.Rpms.SmartExport.App.EhrInterface.IEhrInterface {
        
        public EhrInterfaceClient() {
        }
        
        public EhrInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EhrInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EhrInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EhrInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient[] GetMatchedPatients(ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient searchPattern, int currentPageIndex, int maxRows) {
            return base.Channel.GetMatchedPatients(searchPattern, currentPageIndex, maxRows);
        }
        
        public System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient[]> GetMatchedPatientsAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient searchPattern, int currentPageIndex, int maxRows) {
            return base.Channel.GetMatchedPatientsAsync(searchPattern, currentPageIndex, maxRows);
        }
        
        public int GetPatientCount(ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient searchPattern) {
            return base.Channel.GetPatientCount(searchPattern);
        }
        
        public System.Threading.Tasks.Task<int> GetPatientCountAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient searchPattern) {
            return base.Channel.GetPatientCountAsync(searchPattern);
        }
        
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient GetPatientRecord(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch searchPattern) {
            return base.Channel.GetPatientRecord(searchPattern);
        }
        
        public System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.Patient> GetPatientRecordAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch searchPattern) {
            return base.Channel.GetPatientRecordAsync(searchPattern);
        }
        
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.Visit[] GetScheduledVisitsByPatient(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord, int currentPageIndex, int maxRows) {
            return base.Channel.GetScheduledVisitsByPatient(patientRecord, currentPageIndex, maxRows);
        }
        
        public System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.Visit[]> GetScheduledVisitsByPatientAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord, int currentPageIndex, int maxRows) {
            return base.Channel.GetScheduledVisitsByPatientAsync(patientRecord, currentPageIndex, maxRows);
        }
        
        public int GetScheduledVisitsByPatientCount(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord) {
            return base.Channel.GetScheduledVisitsByPatientCount(patientRecord);
        }
        
        public System.Threading.Tasks.Task<int> GetScheduledVisitsByPatientCountAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord) {
            return base.Channel.GetScheduledVisitsByPatientCountAsync(patientRecord);
        }
        
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.Visit GetVisitRecord(int visitID, ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord) {
            return base.Channel.GetVisitRecord(visitID, patientRecord);
        }
        
        public System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.Visit> GetVisitRecordAsync(int visitID, ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientRecord) {
            return base.Channel.GetVisitRecordAsync(visitID, patientRecord);
        }
        
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportTask PreviewExportResult(FrontDesk.ScreeningResult screeningResult, ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch selectedPatient, int selectedVisitRowId) {
            return base.Channel.PreviewExportResult(screeningResult, selectedPatient, selectedVisitRowId);
        }
        
        public System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportTask> PreviewExportResultAsync(FrontDesk.ScreeningResult screeningResult, ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch selectedPatient, int selectedVisitRowId) {
            return base.Channel.PreviewExportResultAsync(screeningResult, selectedPatient, selectedVisitRowId);
        }
        
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportResult[] CommitExportTask(int patientID, int visitID, ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportTask exportTask) {
            return base.Channel.CommitExportTask(patientID, visitID, exportTask);
        }
        
        public System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportResult[]> CommitExportTaskAsync(int patientID, int visitID, ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportTask exportTask) {
            return base.Channel.CommitExportTaskAsync(patientID, visitID, exportTask);
        }
        
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportResult[] ExportScreeningData(ScreenDox.Rpms.SmartExport.App.EhrInterface.ScreeningResultRecord screeningResultRecord) {
            return base.Channel.ExportScreeningData(screeningResultRecord);
        }
        
        public System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportResult[]> ExportScreeningDataAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.ScreeningResultRecord screeningResultRecord) {
            return base.Channel.ExportScreeningDataAsync(screeningResultRecord);
        }
        
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientValidationResult ValidatePatientRecord(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientSearch) {
            return base.Channel.ValidatePatientRecord(patientSearch);
        }
        
        public System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientValidationResult> ValidatePatientRecordAsync(ScreenDox.Rpms.SmartExport.App.EhrInterface.PatientSearch patientSearch) {
            return base.Channel.ValidatePatientRecordAsync(patientSearch);
        }
        
        public ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportMetaInfo GetMeta() {
            return base.Channel.GetMeta();
        }
        
        public System.Threading.Tasks.Task<ScreenDox.Rpms.SmartExport.App.EhrInterface.ExportMetaInfo> GetMetaAsync() {
            return base.Channel.GetMetaAsync();
        }
    }
}
